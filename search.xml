<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue 项目日志04</title>
      <link href="/2022/01/16/04.%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97%E2%80%94%E2%80%94day04/"/>
      <url>/2022/01/16/04.%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97%E2%80%94%E2%80%94day04/</url>
      
        <content type="html"><![CDATA[<h1 id="项目日志——day04"><a href="#项目日志——day04" class="headerlink" title="项目日志——day04"></a>项目日志——day04</h1><h2 id="element-ui图片墙"><a href="#element-ui图片墙" class="headerlink" title="element-ui图片墙"></a>element-ui图片墙</h2><ul><li><p>首先将element-ui的示例代码拷贝过来</p><ul><li><pre class=" language-vue"><code class="language-vue"><el-upload  action="https://jsonplaceholder.typicode.com/posts/"  list-type="picture-card"  :on-preview="handlePictureCardPreview"  :on-remove="handleRemove">  <i class="el-icon-plus"></i></el-upload><el-dialog :visible.sync="dialogVisible">  <img width="100%" :src="dialogImageUrl" alt=""></el-dialog><script>  export default &#123;    data() &#123;      return &#123;        dialogImageUrl: '',        dialogVisible: false      &#125;;    &#125;,    methods: &#123;      handleRemove(file, fileList) &#123;        console.log(file, fileList);      &#125;,      handlePictureCardPreview(file) &#123;        this.dialogImageUrl = file.url;        this.dialogVisible = true;      &#125;    &#125;  &#125;</script></code></pre></li></ul></li><li><p>分析：上传接口</p><ul><li>首先我们需要修改upload的上传接口——<code>action=我们自己的接口</code></li></ul></li><li><p>分析：on-preview属性是点击放大镜的时候执行的钩子函数</p><ul><li>带有一个参数——<code>file</code></li><li>我们在处理这个回调钩子的时候会做两件事：<ul><li>让下方的dialog显示出来</li><li>暂定：拿到回调的参数<code>file</code>，把<code>file.url</code>本地图片资源访问地址传递给<code>dialogImageUrl</code>，用于弹窗显示图片</li></ul></li></ul></li><li><p>分析：on-remove</p><ul><li><p>on-remove是删除图片列表时触发的回调钩子</p></li><li><p>有两个参数：</p><ul><li>file<ul><li>当前正在删除的图片资源（是从fileList内拿出来的）</li></ul></li><li>fileList<ul><li>就是当前图片墙收集到的所有图片组成的数组</li><li>由此引发一个灵感——我们是否可以手动设置fileList让图片墙自动显式我们设置的图片呢？</li></ul></li></ul></li><li><p>分析：file-list</p><ul><li><p>图片默认列表</p></li><li><p>数据格式：对象数组</p><ul><li><pre class=" language-js"><code class="language-js"><span class="token punctuation">[</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        name<span class="token punctuation">:</span><span class="token string">'xxx'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// name非必须</span>        url<span class="token punctuation">:</span><span class="token string">'xxx.jpg'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span></code></pre></li></ul></li><li><p>将获取到的店铺图片处理成当前格式即可实现图片默认复现</p></li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> VUE </tag>
            
            <tag> VUE 项目日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 项目日志03</title>
      <link href="/2022/01/16/03.%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97%E2%80%94%E2%80%94day03/"/>
      <url>/2022/01/16/03.%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97%E2%80%94%E2%80%94day03/</url>
      
        <content type="html"><![CDATA[<h1 id="项目日志day-03"><a href="#项目日志day-03" class="headerlink" title="项目日志day-03"></a>项目日志day-03</h1><h2 id="表格自定义内容"><a href="#表格自定义内容" class="headerlink" title="表格自定义内容"></a>表格自定义内容</h2><p>表格的<code>el-table-column</code>列为用户提供了默认的匿名作用域插槽功能，所以我们可以再<code>el-table-column</code>中自定义需要的内容</p><p>默认匿名插槽使用语法：</p><pre class=" language-vue"><code class="language-vue"><el-table-column>    <template>        <button>编辑</button>    </template></el-table-column></code></pre><p>默认匿名作用域插槽使用语法：</p><pre class=" language-vue"><code class="language-vue"></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> VUE </tag>
            
            <tag> VUE 项目日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 项目日志02</title>
      <link href="/2022/01/16/02.%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97%E2%80%94%E2%80%94day02/"/>
      <url>/2022/01/16/02.%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97%E2%80%94%E2%80%94day02/</url>
      
        <content type="html"><![CDATA[<h1 id="项目日志—day02"><a href="#项目日志—day02" class="headerlink" title="项目日志—day02"></a>项目日志—day02</h1><h2 id="表单校验"><a href="#表单校验" class="headerlink" title="表单校验"></a>表单校验</h2><p>element-ui的表单校验有两个体系：</p><ul><li>element-ui默认表单校验机制</li><li>自定义表单校验入口</li></ul><h3 id="element-ui默认校验"><a href="#element-ui默认校验" class="headerlink" title="element-ui默认校验"></a>element-ui默认校验</h3><p>要实现el-form表单的默认校验，我们必须具备以下条件：</p><ul><li><code>el-form</code>必须设置<code>:model</code>属性<ul><li>将你的表单对象数据于当前el-form映射起来</li><li>这个映射必须结合el-form-item的prop字段设置</li></ul></li><li><code>el-form</code>必须设置<code>:rules</code>属性<ul><li>将当前表单和你设置的校验规则映射起来</li><li>这个映射也必须结合el-form-item的prop字段设置</li><li><code>:rules</code>对应的校验规则对象内的字段必须和表单对象字段完全一致</li></ul></li><li><code>el-form</code>需要设置<code>ref</code>属性标记<ul><li>用于获取当前el-form的实例，好在后续调用el-form的validate方法进行全局校验</li></ul></li><li><code>el-form-item</code>必须设置prop<ul><li>这个prop属性用来将当前el-form-item表单项与表单数据对象和校验规则内的字段映射起来</li><li><code>el-form-item</code>设置的值就是当前需要校验的字段名</li></ul></li></ul><h4 id="rules校验对象"><a href="#rules校验对象" class="headerlink" title="rules校验对象"></a>rules校验对象</h4><p>rules校验对象有以下特点：</p><ul><li>对象字段必须和表单数据对象字段一致</li><li>每一个字段都接收一个数组<ul><li>这代表每一个字段的校验规则可以是多个</li></ul></li><li>默认的校验规则有：<ul><li>required：必填</li><li>message：校验失败的提示文本</li><li>trigger：校验触发条件（一般都是事件）</li></ul></li></ul><h3 id="element-ui自定义校验"><a href="#element-ui自定义校验" class="headerlink" title="element-ui自定义校验"></a>element-ui自定义校验</h3><p>在默认校验的基础上，我们借助校验规则的<code>validator</code>配置项实现自定义校验。</p><p>要实现自定义校验，我们需要以下两步：</p><ul><li>定义一个校验函数<ul><li>这个函数含有三个参数<ul><li>rule<ul><li>当前字段被触发的校验规则</li></ul></li><li>value<ul><li>当前字段收集的值</li></ul></li><li>callback<ul><li>放行     callback()</li><li>报错      callback(错误信息)</li></ul></li></ul></li></ul></li><li>将当前校验函数传递给校验规则中的<code>validator</code>字段</li></ul><h3 id="element-ui表单全局校验"><a href="#element-ui表单全局校验" class="headerlink" title="element-ui表单全局校验"></a>element-ui表单全局校验</h3><p>el-form为我们提供了一个全局校验方法——<code>validate</code></p><ul><li>这个方法接收一个回调</li><li>回调含有两个参数：<ul><li>valid   Boolean   是否校验成功</li><li>fields  Object       校验失败的字段</li></ul></li></ul><p>我们可以通过valid的值来决定是否可以登录</p><h2 id="组件内部代码解耦"><a href="#组件内部代码解耦" class="headerlink" title="组件内部代码解耦"></a>组件内部代码解耦</h2><p>vue官方提供了一个api——mixin（混入）</p><p>mixin允许我们将组件的js代码单独管理，它类似于css文件，我们只需要将其引入即可把mixin的代码混入到组件的script代码内</p><p>mixin的特点：</p><ul><li>结构和组件实例配置结构一模一样</li><li>mixin的非生命周期配置项和组件内部代码冲突的话则首选组件内部代码（就近原则）</li><li>mixin的生命周期会与组件内部生命周期并行执行</li></ul><p>mixin的使用方式：</p><ul><li>import引入mixin模块</li><li>在组件配置项——mixins中配置你的mixin模块<ul><li>mixins配置项接收数组，代表一个组件可以引入多个mixin</li></ul></li></ul><h2 id="el-table使用须知"><a href="#el-table使用须知" class="headerlink" title="el-table使用须知"></a>el-table使用须知</h2><p>el-table是整个element-ui中最常用的几个组件之一。所以有必要记住这个组件的基本结构和业务机制</p><p>表格结构：</p><ul><li>el-table 表格大容器</li><li>el-table-column  表格列组件</li></ul><p>使用流程：</p><ul><li>el-table上必须设置<code>:data</code>属性<ul><li><code>:data</code>接收的是一个对象数组</li></ul></li><li>el-table-column上必须设置prop来映射数据字段名</li><li>el-table-column上设置label属性为当前列的列名</li><li>el-table-coulmn还可以设置width列宽</li></ul><h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><p>组件通信能为我们带来的好处是：</p><ul><li>代码组织更清晰</li><li>业务代码相对独立</li><li>主体组件代码量大大降低</li><li>维护更容易</li></ul><h3 id="组件通信姿势"><a href="#组件通信姿势" class="headerlink" title="组件通信姿势"></a>组件通信姿势</h3><p>我们应该以何种策略来进行基于通信的解耦？</p><p>切记：<strong>一切组件的原始动机是——渲染和交互</strong></p><ul><li>当规划好组件以后，直接去创建，完成单个组件的功能，再将组件组合起来，形成完整视图</li><li>此后开始进行组件通信<ul><li>确定好谁需要数据<ul><li>需要数据则BUS.$on</li></ul></li><li>确定好谁发送数据<ul><li>发送数据则BUS.$emit</li></ul></li></ul></li></ul><p><strong>BUS的监听最好都在created中统一管理</strong></p><p>实际操作之后我们得出的操作经验是：一个合格的封装好的组件只需要<strong>接收数据来渲染，监听事件</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> VUE </tag>
            
            <tag> VUE 项目日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 项目日志01</title>
      <link href="/2022/01/16/01.%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97%E2%80%94day01/"/>
      <url>/2022/01/16/01.%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97%E2%80%94day01/</url>
      
        <content type="html"><![CDATA[<h1 id="项目日志"><a href="#项目日志" class="headerlink" title="项目日志"></a>项目日志</h1><p>​    错误记录：</p><ol><li><p>单词拼写错误，注意大小写</p></li><li><p>记得给二级路由出口</p></li><li><p>注意重定向二级路由</p></li><li><p>配置axios   </p><ol><li>引入axios </li><li>创建axios实例（项目伸缩性更好）<ol><li>const instance=axios.create({ baseURL=’接口地址’})</li><li>配baseURL地址</li></ol></li><li>暴露axios实例</li></ol></li><li><p>具体页面引入配置 一个页面就是一个管理目录</p><ol><li><p>接口书写规范</p><ol><li><p>书写JSDoc注释：</p><ol><li><p>/**</p><p>​    *@description  登录</p><p>​    *@method      post  请求方式</p><p>​    *@url     请求地址</p><p>​    *@param {String}  account   接收参数</p><p>​    *@param {String} password  接收参数</p><p>*/</p></li></ol></li></ol></li></ol></li><li><p>配置拦截器</p><ol><li>服务器默认允许的post请求格式为 x-www      序列化查询字符串</li><li>axios默认提交的post格式 json格式</li><li>@vue/cli脚手架内置 Qs模块，转义json为x-www</li></ol></li></ol><h2 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h2><p>稳健的架构是项目顺利推进的基础前提，本次项目我们搭建的架构介绍如下：</p><h3 id="文件架构"><a href="#文件架构" class="headerlink" title="文件架构"></a>文件架构</h3><ul><li>api<ul><li>当前项目接口管理目录</li><li>所有接口方法全都放到当前目录内</li><li>规范：一个页面一个独立目录</li></ul></li><li>assets<ul><li>项目所有静态模块资源</li></ul></li><li>router<ul><li>当前项目路由目录</li></ul></li><li>store<ul><li>当前项目vuex数据仓库</li></ul></li><li>components<ul><li>当前项目<strong>全局</strong>组件</li></ul></li><li>views<ul><li>当前项目页面级组件</li><li>规范：<ul><li>一个页面就是一个独立目录</li><li>所有组件命名必须大驼峰！且语义化！</li></ul></li></ul></li><li>utils<ul><li>当前项目公共工具类</li></ul></li></ul><blockquote><p>vue/cli为我们提前定义了src地址别名为@，所以本次项目所有路由都已@别名来引用</p></blockquote><h3 id="项目依赖安装"><a href="#项目依赖安装" class="headerlink" title="项目依赖安装"></a>项目依赖安装</h3><p>本想项目需要的依赖有：</p><ul><li>element-ui<ul><li>项目组件库</li></ul></li><li>axios<ul><li>项目api请求支持库</li></ul></li><li>less<ul><li>css预编译语言</li></ul></li><li>less-loader<ul><li>less加载器</li></ul></li><li>vue-router<ul><li>vue路由插件</li></ul></li><li>vuex<ul><li>vue数据仓库插件</li></ul></li></ul><pre class=" language-js"><code class="language-js">yarn add element<span class="token operator">-</span>ui axios less less<span class="token operator">-</span>loader vue<span class="token operator">-</span>router vuex </code></pre><blockquote><p>yarn安装生产依赖只需要直接：yarn add xxx即可，npm安装生产依赖需要：npm i xxx -S</p></blockquote><p>我们需要知道package.json中的依赖有哪些？</p><ul><li>dependencies <ul><li>生产依赖</li><li>webpack最后会将此类依赖打包到最终产品代码中</li><li>上线后依然要支持产品的运行</li></ul></li><li>devDependencies<ul><li>开发依赖</li><li>webpack最终并不会将其打包到最终产品代码中</li><li>不作为上线运行支持，仅作开发辅助工具而已</li></ul></li></ul><p>webpack打包时会根据依赖分类来决定打包哪些安装的内容。所以上面安装的语句默认是全部安装到生产以来，但<code>less</code>和<code>less-loader</code>我们将安装好的版本号需要转移到开发依赖类别中</p><h4 id="关于less-loader不兼容问题"><a href="#关于less-loader不兼容问题" class="headerlink" title="关于less-loader不兼容问题"></a>关于less-loader不兼容问题</h4><p>目前@vue/cli脚手架对于less-loader 的高版本兼容性不太好，所以如果我们安装10.0以上的版本会导致启动报错，需要手动降低less-loader版本到7.0左右</p><h3 id="项目路由架构"><a href="#项目路由架构" class="headerlink" title="项目路由架构"></a>项目路由架构</h3><p>路由架构中分为：</p><ul><li>一级路由架构<ul><li>所有menu菜单中的一级路由默认渲染<code>Layout</code>组件，后续所有内容都作为二级路由在<code>Layout</code>中渲染</li><li>后续产品的内容管理界面即可和其他诸如登录界面进行切换了</li></ul></li><li>二级路由架构<ul><li>将所有需要在<code>el-main</code>中展示的内容设置为一级路由的子路由，并设置redirect重定向</li></ul></li></ul><h2 id="element-ui布局"><a href="#element-ui布局" class="headerlink" title="element-ui布局"></a>element-ui布局</h2><p>element-ui为我们提供了几个实用的布局容器组件：</p><ul><li><code>el-container</code><ul><li>作用：作为最大的容器，可以包含后续所有组件和自身</li><li><strong>特点：</strong>内部包含<code>el-header</code>或<code>el-footer</code>的时候，为垂直布局，否则为水平布局</li></ul></li><li><code>el-header</code><ul><li>作用：作为头部布局组件</li></ul></li><li><code>el-aside</code><ul><li>作用：作为侧边栏布局组件</li></ul></li><li><code>el-main</code><ul><li>作用：作为主体布局组件</li></ul></li><li><code>el-footer</code><ul><li>作用：作为底部布局组件</li></ul></li></ul><h2 id="element-ui表单组件"><a href="#element-ui表单组件" class="headerlink" title="element-ui表单组件"></a>element-ui表单组件</h2><p>表单组件非常常用，我们非常有必要记住表单组件的以下特征：</p><ul><li>组件布局<ul><li>el-form<ul><li>最大表单容器</li><li>label-width，设置label的宽度。如果不设置，垂直状态下表单的label独占一行</li></ul></li><li>el-form-item<ul><li>表单项，一个表单项占有一整行</li><li>label属性是表单项目的提示文本</li></ul></li></ul></li><li>组件数据操作<ul><li>数据映射</li><li>数据校验</li></ul></li><li>校验流程</li></ul><h2 id="axios架构配置"><a href="#axios架构配置" class="headerlink" title="axios架构配置"></a>axios架构配置</h2><p>axios配置有以下流程：</p><ul><li><p>引入axios</p></li><li><p>创建axios实例并配置<code>baseURL</code></p><ul><li><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> instance <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    baseURL<span class="token punctuation">:</span><span class="token string">'http:xxx.yyy.zzz.xxx:3000'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>配置拦截器</p></li><li><p>暴露实例到模块外界</p></li></ul><p>axios接口方法管理规范：</p><ul><li>一个页面的接口就是一个管理目录</li></ul><p>axios接口方法书写规范：</p><ul><li><p>必须书写JSDoc注释</p><ul><li><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/*** @description 描述文本* @url 请求地址* @method 请求方法* @param &amp;#123; 类型 &amp;#125; 请求参数名    说明文本*/</span></code></pre></li><li></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> VUE </tag>
            
            <tag> VUE 项目日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 深入探究03</title>
      <link href="/2022/01/16/vue-day03/"/>
      <url>/2022/01/16/vue-day03/</url>
      
        <content type="html"><![CDATA[<h2 id="day03"><a href="#day03" class="headerlink" title="day03"></a>day03</h2><h3 id="组件详解"><a href="#组件详解" class="headerlink" title="组件详解"></a>组件详解</h3><p>vue组件的一些基本特性：</p><ul><li>视图模板——template</li><li>自身逻辑——script</li><li>接受属性——props</li><li>通信特征</li><li>自定义事件</li><li>v-model语法糖应用</li></ul><h4 id="组件视图模板"><a href="#组件视图模板" class="headerlink" title="组件视图模板"></a>组件视图模板</h4><p>视图模板主要指的是<code>&lt;template&gt;&lt;/template&gt;</code></p><h4 id="组件自身逻辑"><a href="#组件自身逻辑" class="headerlink" title="组件自身逻辑"></a>组件自身逻辑</h4><p>组件自身逻辑主要指的是<code>&lt;script&gt;&lt;/script&gt;</code>,而一个组件逻辑内部常用的一些设定都有：</p><ul><li><p>data——定义组件自身内部数据</p><ul><li>必须，data必须是函数</li><li>必须，data必须返回一个对象，对象内就是定义的组件自身的数据</li></ul></li><li><p>props——定义组件的属性</p><ul><li><p>对象形式，数组形式</p></li><li><p>对象形式的常用书写语法：</p></li><li><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 属性名：属性类型</span>props<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    num<span class="token punctuation">:</span>Number<span class="token punctuation">,</span>    words<span class="token punctuation">:</span>String<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 完整声明+自定义规则</span>props<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    num<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        type<span class="token punctuation">:</span>Number<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 类型</span>        <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token comment" spellcheck="true">//默认值</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引用类型声明和基本类型有区别</span>props<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    obj<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        type<span class="token punctuation">:</span>Object<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">30</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    arr<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        type<span class="token punctuation">:</span>Array<span class="token punctuation">,</span>        <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>数组形式的常用书写方法</p><ul><li><pre class=" language-js"><code class="language-js">props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">,</span><span class="token string">'arr'</span><span class="token punctuation">,</span><span class="token string">'obj'</span><span class="token punctuation">]</span></code></pre></li></ul></li></ul></li><li><p>methods——定义组件自身的方法</p></li><li><p>watch——监听组件内部数据的变化</p></li><li><p>computed——计算属性，根据当前数据衍生出新的数据</p></li><li><p>生命周期钩子——在每一个生命周期阶段，自动执行</p></li><li><p>filter——过滤器（新版本已经废除）</p></li><li><p>components——注册子组件</p></li></ul><h4 id="组件通信特征"><a href="#组件通信特征" class="headerlink" title="组件通信特征"></a>组件通信特征</h4><p>所有UI框架的组件都具备通信特征，具体通信类型有三种：</p><ul><li>父传子<ul><li>属性通信</li></ul></li><li>子传父<ul><li>vue提供的自定义事件机制</li></ul></li><li>兄弟传兄弟（无视层级通信）<ul><li>第三方BUS集成$emit,$on</li></ul></li></ul><p><strong>父传子</strong></p><p>父传子直接基于属性通信即可，很基础</p><p><strong>子传父</strong></p><p>子传父是基于Vue自定义事件系统实现的，我们需要先认识vue的自定义事件系统</p><p>Vue构造函数原型方法中有一个<code>$on</code>和<code>$emit</code>，它俩的作用：</p><ul><li><p>$on</p><ol><li><p>监听事件</p></li><li><p>接受数据</p></li><li><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'事件名'</span><span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">...</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre></li></ol></li><li><p>$emit</p><ul><li><p>触发事件</p></li><li><p>传递数据</p></li><li><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'事件名'</span><span class="token punctuation">,</span><span class="token string">'要传递的数据'</span><span class="token punctuation">)</span></code></pre></li></ul></li></ul><p>关于$on和$emit的配合，我们需要知道的是：</p><ul><li>Vue是整个应用最大的上下文</li><li>$on监听的事件和执行函数，都挂载到了Vue身上</li><li>$emit触发事件，就是去Vue身上找到对应事件，从而调用事件方法</li><li><strong>而每一个组件其实都继承自Vue，所以，基于$on和$emit我们可以随意进行数据传递（最好使用BUS，详见后文）</strong></li></ul><p>回到子传父，其基本思路就是：</p><ul><li>子组件内部通过<code>this.$emit</code>触发事件</li><li>父组件通过@或者v-on在子组件标签身上监听事件</li></ul><p><strong>兄弟传兄弟（无视层级通信）</strong></p><p>其实本质上就是上面$on和$emit的一个函数式写法。</p><p>在无视层级的书写过程中，我们往往需要一个第三方独立空间来管理监听的事件，此时非常推荐使用一个全新独立的Vue实例。</p><p>实现思路：</p><ol><li>创建一个BUS文件<ol><li>内部暴露一个Vue的实例</li></ol></li><li>在需要发送数据的组件内，合适的位置，使用BUS.$emit来触发自定义事件</li><li>在需要接受数据的组件内，mounted生命周期，使用BUS.$on来监听事件</li></ol><h5 id="组件实例通信"><a href="#组件实例通信" class="headerlink" title="组件实例通信"></a>组件实例通信</h5><p>在vue中有一个叫ref的api，他让我可以获取一个组件的实例，一旦获取到组件实例后，当前组件相关数据和方法我们都可以无障碍使用了</p><p>首先，ref的使用方式：</p><pre class=" language-vue"><code class="language-vue"><组件 ref="标记名"></组件></code></pre><p>获取标记的ref：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">[</span>标记名<span class="token punctuation">]</span></code></pre><p>注意：通过ref，可以获取子组件身上大部分信息，是通信环节中比较重要的一环。但是，仅限于父组件获取子组件信息的场景</p><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p>插槽，能帮助我们让组件具有容器特性。一个设置了插槽的组件就可以包含别的内容（组件）了</p><p>插槽分为三种：</p><ul><li>匿名插槽</li><li>具名插槽</li><li>作用域插槽（重难点）</li></ul><h4 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h4><p>在组件内直接定义<code>&lt;slot&gt;&lt;/slot&gt;</code>，就可以接受外界被包含的内容了</p><p>组件：SlotCmpt</p><pre class=" language-vue"><code class="language-vue"><template>  <div class="wrap">    <p>这是一个带有插槽的组件</p>    <slot></slot>  </div></template></code></pre><p>使用方式：</p><pre class=" language-vue"><code class="language-vue"><SlotCmpt>    <h1>这是包含的内容</h1></SlotCmpt></code></pre><h4 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h4><p>顾名思义，就是为每一个插槽取一个名字，然后放置内容的时候都需要声明是那个插槽的内容</p><p>组件：NamedSlot</p><pre class=" language-vue"><code class="language-vue"><template>  <div class="wrap">    <p>这是一个具名插槽</p>    <slot name="header"></slot>    <slot name="footer"></slot>  </div></template></code></pre><p>使用方式：</p><pre class=" language-vue"><code class="language-vue"><NamedSlot>    <template v-slot:header>        <h1>这是头部</h1>            </template>        <template v-slot:footer>        <h1>这是底部</h1>    </template></NamedSlot></code></pre><h4 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h4><p>作用域插槽是插槽中和具名插槽使用频率不相上下的一个板块</p><p>作用域插槽在组件通信中使用频率非常高！如果你希望做一个非常智能的组件，作用域插槽一定可以帮到你！</p><p>组件：ScopeSlot</p><pre class=" language-vue"><code class="language-vue"><template>  <div>    <p>这是一个作用域插槽</p>    <!--         外界接收到的作用域对象长这样：            &#123;name1,name2,name3&#125;     -->    <slot :person1="name1" :person2="name2" :person3="name3"></slot>  </div></template></code></pre><p>使用方式：</p><pre class=" language-vue"><code class="language-vue"><div>    <p>下面颁发今年源码时代，最受欢迎原创代码奖：</p>    <ScopeSlot>        <!--         1.此处的persons是自己定义的名字        2.persons代表了子组件内整个作用域插槽        -->        <template v-slot="persons">            &#123;&#123; persons &#125;&#125;        </template>    </ScopeSlot>    <!-- 还可以通过解构的方式来获取子组件的数据 -->    <ScopeSlot>        <template v-slot="&#123; person1 &#125;">            &#123;&#123; person1 &#125;&#125;        </template>    </ScopeSlot></div></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> VUE </tag>
            
            <tag> VUE 常用语法总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 深入探究</title>
      <link href="/2022/01/16/vue-day02/"/>
      <url>/2022/01/16/vue-day02/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-day02"><a href="#Vue-day02" class="headerlink" title="Vue-day02"></a>Vue-day02</h2><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>v-bind主要作用是：绑定属性</p><p>在vue中，自定义的组件可以通过属性与外界进行通信，那么我们如何为一个组件（<strong>或者原生html节点</strong>）添加属性呢？</p><p>一句比较绝对又冒失的话：</p><p><strong>template里面的东西，基本都可以使用v-bind来添加属性</strong></p><p><strong>添加常规属性</strong></p><pre class=" language-vue"><code class="language-vue"><!--    基本语法：        v-bind:属性名=“属性值（或变量）”--><p v-bind:selfStr="str">hello world</p></code></pre><p><strong>添加样式类名属性</strong></p><pre class=" language-vue"><code class="language-vue"><!--    基本语法：        v-bind:class="&#123;类名：flag，类名：flag&#125;"    语法解析：        通过flag来绝对多个class类名的灵活组合--><p v-bind:class="&#123;red:flag,blue:!flag&#125;">hello world</p></code></pre><p><strong>添加style行内样式</strong></p><pre class=" language-vue"><code class="language-vue"><!--    基本语法：        v-bind:style="&#123; dom样式属性名：样式值，。。。 &#125;"    语法解析：        dom样式属性名需要使用小驼峰方式，且属性值为字符串的时候需要添加引号--><p v-bind:style="&#123; color: 'red', fontWeight: 'bold' &#125;">元宵节快乐</p></code></pre><p style="background:#ff3300;color:#fff;text-align:center;font-weight:bold">v-bind还有一个最佳简写方案:【:属性名】</p>### 过滤器filter（新版本已经移除）<p>过滤器作用和computed差不多，两者之间的区别：</p><p><strong>computed：</strong></p><ul><li>缓存机制</li><li>源数据生成新数据</li><li>源数据发生改变新数据也改变</li></ul><p><strong>filter</strong></p><ul><li>没有缓存机制，过滤几次调用几次</li><li>源数据生成新数据</li><li>源数据发生改变新数据也改变</li></ul><pre class=" language-vue"><code class="language-vue"><template>    <ul>        <li v-for="(item, index) in stus" :key="index">&#123;&#123; item | newStu &#125;&#125;</li>    </ul></template><script>  data() &#123;    return &#123;      stus: ["杨洋", "赵任杰", "董家豪", "霍佳俊", "刘佳", "陶天骄"],    &#125;;  &#125;,  filters: &#123;    newStu(stu) &#123;      return "0928-" + stu;    &#125;,  &#125;,</script></code></pre><h3 id="侦听器watch"><a href="#侦听器watch" class="headerlink" title="侦听器watch"></a>侦听器watch</h3><p>在某些项目中，我们需要在数据发生改变后立即执行某些行为（而不是得到新数据），那么针对这样的情况，我们使用watch侦听器比较合适。</p><p><strong>实际项目中，我们有时候会对诸如异步数据进行监听，此时我们需要watch来协助</strong></p><p>基本语法：</p><pre class=" language-vue"><code class="language-vue">...watch:&#123;    变量名<data中定义的变量>(newValue)&#123;        ...        &#125;&#125;</code></pre><h3 id="props属性"><a href="#props属性" class="headerlink" title="props属性"></a>props属性</h3><p>props属性，规定了当前组件可以接受外界的数据，来参与内部计算。</p><p>props属性有以下特点：</p><ul><li><p>组件标签上属性的体现和html属性的体现一致</p><ul><li>由于业务需求，更多时候，我们需要使用v-bind来为属性传递更多类型的值</li></ul></li><li><p>请切记！！！！！</p><ul><li><strong>当前组件不允许修改外界传递来的属性</strong>，但这绝对吗？不绝对</li></ul></li></ul><h4 id="props属性语法"><a href="#props属性语法" class="headerlink" title="props属性语法"></a>props属性语法</h4><ul><li><pre class=" language-javascript"><code class="language-javascript">props<span class="token punctuation">:</span><span class="token punctuation">[</span>属性名<span class="token number">1</span><span class="token punctuation">,</span>属性名<span class="token number">2</span><span class="token punctuation">,</span>属性名<span class="token number">3</span>。。。<span class="token punctuation">]</span></code></pre><ul><li>优点：可以非常简洁的接受多个属性</li><li>缺点：约束性不高，所有属性可以传递任何值</li></ul></li></ul><ul><li><pre class=" language-javascript"><code class="language-javascript">props<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    这种方式用得最多    属性名<span class="token number">1</span><span class="token punctuation">:</span>类型（Sring）<span class="token punctuation">,</span>    属性名<span class="token number">2</span><span class="token punctuation">:</span>类型（Sring）<span class="token punctuation">,</span>    属性名<span class="token number">3</span><span class="token punctuation">:</span>类型（Sring）<span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>优点：可以相对准确的约束属性的类型</li><li>缺点：无法自定义约束，以达到更加精确的类型和结构约束</li></ul></li></ul><ul><li><pre class=" language-javascript"><code class="language-javascript">props<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    属性名<span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        type<span class="token punctuation">:</span>类型<span class="token punctuation">,</span>         <span class="token keyword">default</span><span class="token punctuation">:</span>默认值<span class="token punctuation">,</span>        required<span class="token punctuation">:</span>boolean<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//必填</span>        <span class="token function">validator</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 自定义校验</span>            <span class="token keyword">return</span> boolean                  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>优点：可以实现更多约束：必填、默认值、自定义校验</li><li>缺点：语法繁琐</li></ul></li></ul><p>代码演示：</p><pre class=" language-vue"><code class="language-vue"><template>  <div>    <p>&#123;&#123; tit &#125;&#125;</p>    <p>&#123;&#123; content.name &#125;&#125;</p>  </div></template><script>export default &#123;  // props: ["tit", "content"],    // 使用数组定义props  /*      props:&#123;    // 使用对象定义props          tit:String,          content:Object      &#125;,  */  props: &#123; // 更复杂的props写法    tit: &#123;      type: String,      default: "默认tit",      required: true,      validator(v) &#123;        return v !== "李四";      &#125;,    &#125;,    content: Object,  &#125;,&#125;;</script><style scoped></style></code></pre><h3 id="vue-router基本语法使用"><a href="#vue-router基本语法使用" class="headerlink" title="vue-router基本语法使用"></a>vue-router基本语法使用</h3><p>vue-router是vue路由的首选插件（也是官方插件）</p><p>vue-router的路由，其实是通过监听浏览器地址栏hash地址或者history（html5提供的新功能）地址来判断并切换要显示的dom内容。</p><p>基本使用方法：</p><ol><li><p>引入——引入Vue和VueRouter</p><ol><li><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span></code></pre></li></ol></li><li><p>注册</p><ol><li><pre class=" language-js"><code class="language-js">Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//很多基于vue的插件和组件库都是使用vue.use来注册的</span></code></pre></li></ol></li><li><p>结构——创建路由数据结构</p><ol><li><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        path<span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'../../MyDemo'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span></code></pre></li></ol></li><li><p>实例——通过VueRouter生成实例化路由</p><ol><li><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    routes<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre></li></ol></li><li><p>挂载——将路由实例导出，在main.js中引入并挂载</p><ol><li><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  router<span class="token punctuation">,</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre></li></ol></li></ol><p>以上为路由基本使用语法</p><p>但是！若想你的路由正常使用，你还需要一个路由出口组件：<code>&lt;router-view&gt;</code>，所有路有规则匹配到的组件都会在<code>&lt;router-view&gt;</code>，（<strong>这也是实现路由嵌套的核心组件</strong>）</p><h4 id="router-view详解"><a href="#router-view详解" class="headerlink" title="router-view详解"></a>router-view详解</h4><p>router-view是vue-router提供的一个路由入口组件，其主要作用为：根据路由规则来切换渲染对应的组件</p><p>虽然概念简单，但实际项目应用中router-view往往和App.vue牵扯不清。</p><p>首先你需要知道一个概念：<strong>App.vue是整个vue项目中唯一保持生命活性的组件，这就是为什么App.vue被称为入口组件的原因</strong></p><p>那么结合App.vue我们可以得到一个结论，router-view在进行一级页面切换的时候最好就是直接让router-view代替App.vue内部的所有内容</p><p><strong>router-view和vue-router又有什么关系呢？</strong></p><ul><li>vue-router最主要的作用是给vue配置路由逻辑，让vue项目内部可以跳转路由和使用路由相关api</li><li>router-view最主要的功能是渲染视图，当vue-router监听到浏览器规则时，将对应组件交给router-view来呈现渲染</li></ul><h4 id="vue路由跳转"><a href="#vue路由跳转" class="headerlink" title="vue路由跳转"></a>vue路由跳转</h4><p>vue路由跳转有三种方式：</p><ul><li><p>组件跳转</p><ul><li><p>使用<code>&lt;router-link /&gt;</code>组件来实现跳转</p></li><li><pre class=" language-vue"><code class="language-vue"><router-link to="/hello-world">跳转到hello-world（组件跳转）</router-link></code></pre></li></ul></li><li><p>函数跳转</p><ul><li><p>当你在vue项目中成功配置了一个vue-router路由之后，你的项目全局范围内就会挂载一个$router大对象</p></li><li><p>$router是项目全局路由大对象，可以得到所有跟路由【处理】相关的属性和方法</p></li><li><p>在任何组件内，通过<code>this.$router</code>即可访问到</p></li><li><p>通过<code>this.$router.push(path)</code>就可以进行跳转了</p></li><li><pre class=" language-js"><code class="language-js"><span class="token function">jumpTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/hello-world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>a标签跳转</p><ul><li><p>使用a标签结合锚点路径来进行跳转</p></li><li><pre class=" language-vue"><code class="language-vue"><a href="#/hello-world">跳转到hello-world</a></code></pre></li></ul></li></ul><h4 id="vue路由传参"><a href="#vue路由传参" class="headerlink" title="vue路由传参"></a>vue路由传参</h4><p>路由可以跳转，也可以传参，常用传参手段，往往是借助路由函数跳转方式进行传参。</p><p>在了解传参之前，我们还需要知道一个东西：【当前路由对象—$route】（请注意和$router全局路由对象区分开）.</p><p>当前路由对象$route带有当前路由全部相关信息，通过console打印可以知道，当前路由对象$route身上带有一个<code>params</code>和<code>query</code>两个属性，这两个属性其实就可以帮助我们得到前一个路由传递来的参数了</p><p>路由传参基本语法：</p><p><strong>params传参</strong></p><p style="background:#ff3300;color:#fff;font-weight:bold;text-align:center">使用params传参，路由必须具备name，且只能基于name跳转</p>````jsthis.$router.push({    name:'hello-world',    params:{        id:1    }})````<p style="background:#ff3300;color:#fff;font-weight:bold;text-align:center">params传递的参数不持久，参数不在地址栏体现，刷新页面后，就消失了</p>**query传参**<p style="background:#ff3300;color:#fff;font-weight:bold;text-align:center">query既能基于path跳转，也能基于name跳转</p>````jsthis.$router.push({    path:'/hello-world',    query:{        id:1    }})````<p style="background:#ff3300;color:#fff;font-weight:bold;text-align:center">使用query传参，参数在地址栏上体现，且持久</p>实际项目中，我们在大型参数（大对象，大数组）传递时，更多使用的是本地存储<h4 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h4><p>从写法上分析，路由嵌套，最重要的地方就是路由数据结构中的【children】属性</p><pre class=" language-js"><code class="language-js"><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        path<span class="token punctuation">:</span> <span class="token string">'/hello-world'</span><span class="token punctuation">,</span>        name<span class="token punctuation">:</span> <span class="token string">'hello-world'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/components/HelloWorld'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        children<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">//当前路由下书写children子路由数据结构</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                path<span class="token punctuation">:</span> <span class="token string">'hello-1'</span><span class="token punctuation">,</span>                component<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'@/components/Hello1'</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token punctuation">]</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>从逻辑上分析，既然有二级路由，那就说明【当前路由对应的组件内还会继续进行路由规则匹配和路由组件渲染】，</p><p>基于上面的描述，代表，那个组件内有子路由，那么那个组件内一定要有一个<code>&lt;router-view&gt;&lt;/router-view&gt;</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> VUE </tag>
            
            <tag> VUE 常用语法总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 入门安排01</title>
      <link href="/2022/01/16/vue-day01/"/>
      <url>/2022/01/16/vue-day01/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><strong>不到万不得已，不要去操作dom！</strong></p><h3 id="vue简介"><a href="#vue简介" class="headerlink" title="vue简介"></a>vue简介</h3><p>略略略</p><h3 id="Vue注意事项"><a href="#Vue注意事项" class="headerlink" title="Vue注意事项"></a>Vue注意事项</h3><ul><li><p>不再需要使用dom的思维去看待应用</p><ul><li>我们要使用建模的思维来看待应用</li></ul></li><li><p>会发现很多东西都需要【安装】才能使用，而不是script引入</p></li><li><p>会发现代码文本的结构组织会变得非常重要</p></li></ul><h3 id="Vue的特点"><a href="#Vue的特点" class="headerlink" title="Vue的特点"></a>Vue的特点</h3><ul><li>一个MVVM框架<ul><li>MVVM是一种架构模式，这个模式让开发者不需要关注dom的渲染过程，而只需要关注数据模型的构建</li></ul></li><li>Vue内置许多<strong>指令</strong>，这会帮助我们很好的去将数据和视图从代码逻辑层面关联起来</li><li>Vue学习中，常用指令和配置项比较少，非常非常容器上手。官方文档号称：猴子都能看懂</li></ul><h3 id="vue项目安装"><a href="#vue项目安装" class="headerlink" title="vue项目安装"></a>vue项目安装</h3><p>首先需要先安装vue的脚手架工具</p><p><code>yarn global add @vue/cli</code></p><p>或</p><p><code>npm i @vue/cli -g</code></p><p>安装完成后，运行：</p><p><code>vue -V</code></p><p>可以查看当前脚手架的版本（注意！是脚手架版本不是vue的版本）</p><h3 id="认识项目结构"><a href="#认识项目结构" class="headerlink" title="认识项目结构"></a>认识项目结构</h3><p>关于项目的常规操作：</p><ul><li>启动项目<ul><li>进入项目目录，运行<code>yarn serve</code>或者<code>npm run serve</code></li></ul></li><li>关闭项目<ul><li>在项目启动命令界面，按下键盘<code>ctrl+c</code>就可以关闭项目</li></ul></li><li>修改启动命令别名<ul><li>找到package.json内的scripts配置项，将<code>serve</code>修改为你想要的启动命令别名</li></ul></li><li>安装vetur扩展</li><li>安装 Vue VSCode Snippets </li></ul><p>vue中我们常用项目结构如下（部分目录是后续自己创建的）：</p><ul><li>public<ul><li>静态文件目录</li><li>主要包含index.html文件，和ico图标</li><li>public中的index.html就是单页面应用内的唯一那个html文件</li><li>此处public内只有一个html文件，说明了什么？<ul><li>vue主要用于开发SPA（single page application）单页面应用，整个应用中只有一个html文件</li><li>单页面应用的特点是只发送依次http静态资源请求，后续页面跳转全都是本地dom的更新</li></ul></li></ul></li><li>src<ul><li>项目开发主目录<ul><li>vue/cli创建的项目是基于webpack打包的</li><li>webpack默认打包目录就是src</li></ul></li><li>所有vue开发相关内容都在src中</li><li><strong>下文会仔细解析</strong></li></ul></li><li>.gitignore<ul><li>git忽略文件配置</li><li>比如node_modules这个文件没有必要提交到git中，.gitignore就会忽略node_modules的提交</li></ul></li><li>babel.config.js<ul><li>babel是一个js的编译器，可以将浏览器不支持的预编译语言编译成浏览器能支持的结果</li><li>babel.config.js主要的作用是配置vue项目内的编译</li><li>我们所有组件文件的后缀都是<code>.vue</code>，这是浏览器原生不支持的，babel可以将<code>.vue</code>编译成浏览器支持的html、css、js文件</li></ul></li><li>package.json<ul><li>依赖管理</li><li>启动脚本管理——scripts</li><li>代码单元测试管理——eslintconfig<ul><li>eslint的作用是用于代码的语法检测，让代码更加规范<ul><li>变量声明</li><li>模块引用</li><li>标点符号等等</li></ul></li><li>在eslintconfig配置项中，我们可以配置检测规则等等</li></ul></li></ul></li><li>yarn.lock(<strong>小重点</strong>)<ul><li>这个文件的作用是记录yarn安装的所有依赖地址</li><li>以后使用yarn安装会首选.lock中的地址</li><li>有时候npm服务资源不稳定，就导致原本lock中的地址失效，从而多次yarn也会失败</li><li>此时，我们应该，删除.lock文件，再重新yarn一次</li></ul></li><li>vue.config.js<ul><li>vue脚手架配置工具</li><li>默认安装的项目并没有这个文件，需要手动创建</li><li>主要作用是——<ul><li>设置代理</li><li>设置编译</li><li>配置多页面</li><li>配置本地服务</li></ul></li></ul></li></ul><p><strong>重点！！！</strong></p><p>在vue中我们更多接触的目录是——src</p><p>src是vue里面最重要的开发目录，我们需要在src中规划我们的开发资源，那么常用的src目录如下：</p><ul><li>assets<ul><li>静态文件——css，js，img，font（字体）</li></ul></li><li>components<ul><li>组件</li></ul></li><li>api<ul><li>业务接口</li><li>推荐大家开发规范是：</li><li>一个页面的接口就是一个目录</li><li>目录内当前接口文件命名xxx.api.js</li><li>但，去了单位，还是遵循别人的规范吧</li></ul></li><li>utils<ul><li>工具类</li></ul></li><li>router<ul><li>路由</li></ul></li><li>store<ul><li>数据仓库</li></ul></li><li>plugins<ul><li>插件</li></ul></li></ul><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>使用vue进行前端开发的时候，组件概念是永恒的话题。</p><p>vue中组件形态是统一的：</p><ul><li>template<ul><li>template内主要书写html视图结构</li></ul></li><li>script<ul><li>script内主要书写当前组件的js业务逻辑</li></ul></li><li>style<ul><li>sytle内主要书写当前组件的样式</li></ul></li></ul><p>vue组件使用步骤：</p><ol><li>引入<ol><li>import引入自己定义的组件</li></ol></li><li>注册<ol><li>使用components属性注册你的组件</li></ol></li><li>使用<ol><li>将组件标签放到template中使用</li></ol></li></ol><p>上面三步必须严格执行，否则eslint会报错</p><h3 id="定义数据"><a href="#定义数据" class="headerlink" title="定义数据"></a>定义数据</h3><p>vue定义数据在data中定义，data中的数据可以在组件内部的script中参与计算，也可以在template模板中使用</p><pre class=" language-vue"><code class="language-vue"><template>  </template><script>export default &#123;  data() &#123;    return &#123;      words: "这是定义的数据",    &#125;;  &#125;,&#125;;</script><style></style></code></pre><h3 id="Mustach模板编译语法"><a href="#Mustach模板编译语法" class="headerlink" title="Mustach模板编译语法"></a>Mustach模板编译语法</h3><p>Mustach语法让我们可以将组件内部定义的数据渲染到视图template木板上</p><pre class=" language-vue"><code class="language-vue"><template>  <div>&#123;&#123; words &#125;&#125;</div></template><script>export default &#123;  data() &#123;    return &#123;      words: "这是我自己创建的组件",    &#125;;  &#125;,&#125;;</script><style></style></code></pre><p>mustache目标符之内可以使用<strong>表达式</strong></p><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>vue给了我们一个很大的福利——指令。</p><p>vue的指令非常强大，能帮助我们减少极其多的复杂工作。</p><p>一句话概括：</p><p style="background:#ff3300;text-align:center;color:#fff">vue指令是专门用于dom处理的，所有指令都只能用在dom或者组件标签身上</p>常用的vue指令：<ul><li><p>内容</p><ul><li>v-text——渲染文本</li><li>v-html——渲染html（包括文本）</li></ul></li><li><p>显隐</p><ul><li>v-show——基于css控制<ul><li>频繁操作中，使用show更合理</li></ul></li><li>v-if——基于渲染控制<ul><li>不频繁操作的时候，使用if更安全</li></ul></li></ul></li><li><p>分支</p><ul><li>v-if<ul><li>if判断</li></ul></li><li>v-else-if<ul><li>else if分支</li></ul></li><li>v-else<ul><li>else分支</li></ul></li><li>if，else if，else如果要凑成一个分支，那相关dom一定要紧挨着书写</li></ul></li><li><p>列表</p><ul><li><p>v-for</p><ul><li><p>v-for在实际界面渲染中显得非常重要，其基本语法和嵌套语法如下：</p></li><li><pre class=" language-vue"><code class="language-vue"><ul>    <li v-for="(item, index) in stus" :key="index">&#123;&#123; item &#125;&#125;</li></ul><ul>    <li v-for="(item, index) in workers" :key="index">        <p>&#123;&#123; item.name &#125;&#125;</p>        <p>&#123;&#123; item.job &#125;&#125;</p>        <p>            <span v-for="(_item, _index) in item.skills" :key="_index">&#123;&#123;                      _item                      &#125;&#125;</span>        </p>    </li></ul></code></pre></li></ul></li></ul></li><li><p>数据绑定</p><ul><li>vue中使用v-model进行数据和视图的双向绑定，在表单应用中使用尤其多（还可以在自定义组件内使用）</li><li>input——收集input输入内容</li><li>radio<ul><li>收集radio本身的value</li></ul></li><li>checkbox<ul><li>收集checkbox本身的value<ul><li>当v-model绑定的数据是数组时，收集value</li></ul></li><li>收集true和false<ul><li>当v-model绑定的数据是非数组时，收集true和false</li></ul></li></ul></li><li>textarea——收集文本域的value</li><li>select——收集option的value</li></ul></li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>vue中我们为了改变数据，会定义修改数据的方法。那么如何定义方法呢？</p><p>vue中定义方法，我们会使用一个methods属性</p><pre class=" language-vue"><code class="language-vue"><template>    <!-- @click是一个事件绑定语法，下一个板块我们会细致的解释 -->      <button @click="doSth">点击按钮触发事件</button></template><script>export default &#123;  methods:&#123;    // 此处定义方法      doSth()&#123;        console.log('你点击了按钮')    &#125;,    doOtherSth()&#123;        console.log('你定义了另一个方法')    &#125;  &#125;&#125;;</script><style></style></code></pre><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>在vue中的事件处理监听方式和传统事件监听有一定区别，高度封装的vue将事件的监听方式也进行了一个封装</p><p><u>在使用事件的时候，同时需要知道一个组件的方法只能定义在【methods】属性内</u></p><p>事件监听语法有两种：</p><ul><li><p>v-on监听</p><ul><li><pre class=" language-vue"><code class="language-vue"><button v-on:click="doAlert">点击按钮，弹窗</button></code></pre></li></ul></li><li><p>@监听</p><ul><li><pre class=" language-vue"><code class="language-vue"><button @click="doAlert">点击按钮，弹窗</button></code></pre></li></ul></li></ul><p>事件监听的同时也可以传参：</p><pre class=" language-vue"><code class="language-vue"><button @click="doAlert('点击了')">点击按钮，弹窗</button></code></pre><p>关于事件对象：<strong>事件句柄方法中，可以直接通过event来获取当前事件对象</strong></p><pre class=" language-vue"><code class="language-vue"><template>  <div class="app">    <button @click="doSth(1)">dianji</button>  </div></template><script>export default &#123;  methods: &#123;    doSth(arg) &#123;      console.log(arg, event);  // 此处直接可以打印事件对象    &#125;,  &#125;,&#125;;</script><style lang="less" scoped></style></code></pre><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>计算属性顾名思义就是对属性的值进行计算，从而得到一个新的值。</p><p>计算属性设计的目的就是基于原本的数据来通过计算衍生出新的数据，而又不影响原本的数据</p><p>基本语法：</p><pre class=" language-vue"><code class="language-vue">...computed:&#123;    新数据名()&#123;        ...进行计算        return 新数据    &#125;&#125;</code></pre><p>使用的时候，<strong>直接使用【新数据名】即可</strong></p><p><strong>计算属性的特点：</strong></p><ul><li>必须定义在computed内</li><li>必须以函数形态呈现</li><li>必须有返回值</li></ul><p><strong>计算属性最大的作用：</strong></p><ul><li>通过原本的数据衍生新的数据</li><li>在数据衍生过程中，可以通过观察数据变化从而进行别的行为操作</li></ul><p><strong>计算属性的优势：</strong></p><ul><li>计算属性有缓存性质，如果源数据不变，则不论使用多少次衍生数据，都只会调用一次方法</li><li>一旦源数据发生改变，则计算属性从新计算</li></ul><h3 id="vue生命周期"><a href="#vue生命周期" class="headerlink" title="vue生命周期"></a>vue生命周期</h3><p>诸如vue和react一类的框架，大部分都有生命周期<strong>钩子方法</strong>这么一个说法，为什么需要生命周期呢？</p><p>因为我们需要建立一个组件从开始到销毁的整个节点把控系统。</p><p>比如，组件刚开始渲染的时候，数据是异步的，怎么办？那就在初始化生命周期（比如create）的时候，发送ajax请求</p><p>vue有四大生命阶段，8大生命周期：</p><ul><li>创建——将data数据初始化，绑定到组件身上<ul><li>beforeCreate<ul><li>创建前</li></ul></li><li>created<ul><li>创建后</li></ul></li></ul></li><li>渲染——将template模板加载到dom视图中<ul><li>beforeMount<ul><li>渲染前</li></ul></li><li>mounted（操作dom的话，从这个生命周期后，就可以了）<ul><li>渲染后</li></ul></li></ul></li><li>更新——拿到新数据，更新dom视图<ul><li>beforeUpdate<ul><li>更新前</li></ul></li><li>updated<ul><li>更新后</li></ul></li></ul></li><li>销毁——将当前组件从视图上移除<ul><li>beforeDestroy<ul><li>销毁前</li></ul></li><li>destroyed<ul><li>销毁后</li></ul></li></ul></li></ul><h3 id="axios美好体验"><a href="#axios美好体验" class="headerlink" title="axios美好体验"></a>axios美好体验</h3><p>安装axios</p><pre class=" language-javascript"><code class="language-javascript">npm install axios <span class="token operator">--</span>saveyarn add axios <span class="token operator">--</span>save</code></pre><p>在需要使用的地方引入axios</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/stu_list'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> VUE </tag>
            
            <tag> VUE 常用语法总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 小试牛刀</title>
      <link href="/2022/01/09/vue_cli/"/>
      <url>/2022/01/09/vue_cli/</url>
      
        <content type="html"><![CDATA[<h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>​      - 概念：为组件标签或html标签设置属性</p><p>​      - 语法：</p><p>​        - 添加常规属性</p><p>​          - v-bind:属性名=属性值</p><p>​          - :属性名=属性值</p><p>​        - 添加class类</p><p>​          - (v-bind):class=”{className:flag}”</p><p>​            - 当flag为true的时候，className就会应用到标签上</p><p>​        - 添加style行内样式属性</p><p>​          - (v-bind):style=”{color:’red’,backgroundColor:’blue’}”</p><p>​      - 特点：可以设置一切符合JS语法规范的数据类型</p><pre class=" language-javascript"><code class="language-javascript">        <span class="token operator">&lt;</span>h3<span class="token operator">></span>v<span class="token operator">-</span>bind添加常规属性<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 这种设置方式的缺陷：只能设置字符串属性值 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>p a<span class="token operator">=</span><span class="token string">"这是属性"</span><span class="token operator">></span>此处接收传统html属性<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p v<span class="token operator">-</span>bind<span class="token punctuation">:</span>a<span class="token operator">=</span><span class="token string">"attr_text"</span><span class="token operator">></span>此处接收v<span class="token operator">-</span>bind传递的属性<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p <span class="token punctuation">:</span>a<span class="token operator">=</span><span class="token string">"attr_text"</span><span class="token operator">></span>此处接收v<span class="token operator">-</span>bind简写属性<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>v<span class="token operator">-</span>bind添加<span class="token keyword">class</span>类<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>p <span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"&amp;#123;red:flag,blue:!flag&amp;#125;"</span><span class="token operator">></span>此处为变色文字<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"flag=!flag"</span><span class="token operator">></span>信号灯<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>v<span class="token operator">-</span>bind添加style样式<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>p <span class="token punctuation">:</span>style<span class="token operator">=</span><span class="token string">"&amp;#123;color:'red',fontSize:'22px'&amp;#125;"</span><span class="token operator">></span>此处接收v<span class="token operator">-</span>bind设置style行内样式<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span></code></pre><h3 id="条件判断-if…else-if…else"><a href="#条件判断-if…else-if…else" class="headerlink" title="条件判断 if…else if…else"></a>条件判断 if…else if…else</h3><p>​    分支系：语法和js分支的写法非常相似</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>p v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"dateNum === 1"</span><span class="token operator">></span>今天是星期一<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"dateNum === 2"</span><span class="token operator">></span>今天是星期二<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"dateNum === 3"</span><span class="token operator">></span>今天是星期三<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"dateNum === 4"</span><span class="token operator">></span>今天是星期四<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"dateNum === 5"</span><span class="token operator">></span>今天是星期五<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"dateNum === 6"</span><span class="token operator">></span>今天是星期六<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"dateNum === 7"</span><span class="token operator">></span>今天是星期日<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span>p v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">></span>我也不知道今天周几<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><h3 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h3><ol><li>何为组件通信：组件之间交换数据，或相互访问内部数据和方法</li><li>父传子只需要父组件将数据通过props传递给子组件即可</li></ol><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>概念：根据源数据衍生新的数据</p><p>​    - 语法：</p><p>​      - 必须在computed配置项中定义</p><p>​      - 可以定义多个计算属性</p><p>​      - 计算属性必须是函数形式，且必须有返回值</p><p>​        - 内部根据源数据计算得到结果并返回</p><p>​    - 使用：计算属性的使用和data一致</p><p>​    - 特点：</p><p>​      - 源数据改变，计算数据也改变</p><p>​      - 具有缓存性，多次使用只有一次调用</p><h3 id="data定义数据的语法"><a href="#data定义数据的语法" class="headerlink" title="data定义数据的语法"></a>data定义数据的语法</h3><p>- data必须是一个函数</p><p>​    - data内必须return一个对象</p><p>​    - 定义的数据就是对象的属性</p><p>​    - 在template内渲染变量或表达式</p><p>export default默认暴露模块，代表所有组件文件都默认暴露一下的配置</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">// export default默认暴露模块，代表所有组件文件都默认暴露一下的配置</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// data内每一次调用都是return一个全新的对象</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      str<span class="token punctuation">:</span> <span class="token string">"这是data定义的数据11111"</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="data中对象-数组订阅的表现特点"><a href="#data中对象-数组订阅的表现特点" class="headerlink" title="data中对象/数组订阅的表现特点"></a>data中对象/数组订阅的表现特点</h3><p>对象：</p><p>第二种修改：重新赋值一个全新对象</p><p>   结论：可以驱动视图</p><p>   原因：stuInfo的地址发生改变，导致vue重新订阅所有属性并更新视图</p><p>​    this.stuInfo = {</p><p>​     name: “张三”,</p><p>​     age: 20,</p><p>​     address: “成都市高新区”,</p><p>​    };</p><p> 第三种修改：vue提供了一个api——$set。</p><p>   语法：this.$set(obj,keyName,value)</p><p>   作用：手动新增一个属性并订阅它</p><p>   结论：可以驱动视图</p><p>数组：</p><p>第一种修改：直接使用索引修改</p><p>   结论：无法驱动视图</p><p>   vue只能订阅基本类型和对象及内部属性值，对于其他类型只能订阅地址。此处直接修改数组内部数据无法更新视图</p><p>   this.skills[0] = ‘ESMAscript’</p><p>第二种修改：使用数组splice方法</p><p>   结论：可以驱动视图</p><p>   因为vue包装了splice方法，此处的splice起始是vue提供的api，而不是数组自身的splice方法</p><p>this.skills.splice(0, 1, “ESMAscript”);</p><p>第三种修改：重新赋值一个新的数组</p><p>   结论：可以驱动视图</p><p>   因为重新赋值，导致skills的地址改变，进而通知vue需要重新更新视图。</p><p>   this.skills = [“ESMAscript”, “mysql”, “java”, “php”]</p>]]></content>
      
      
      
        <tags>
            
            <tag> VUE </tag>
            
            <tag> VUE 常用语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步同步及框架</title>
      <link href="/2022/01/03/sty05/"/>
      <url>/2022/01/03/sty05/</url>
      
        <content type="html"><![CDATA[<h2 id="异步同步及框架"><a href="#异步同步及框架" class="headerlink" title="异步同步及框架"></a>异步同步及框架</h2><h3 id="同步和异步（理解）"><a href="#同步和异步（理解）" class="headerlink" title="同步和异步（理解）"></a>同步和异步（理解）</h3><ul><li><p>同步</p><p>代码顺序执行，后面的代码等前面的代码执行完再执行</p></li><li><p>异步</p><p>异步代码要等到当前文件中所有同步代码执行完成以后再单独依次执行异步代码</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 同步代码  </span><span class="token comment" spellcheck="true">//console.log(3)要等到循环结束才开始执行</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'循环'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//异步代码</span><span class="token comment" spellcheck="true">// setTimeout中的定时器会等到两个console执行完成以后才执行</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'循环'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p><strong>JS中常见的异步场景</strong></p><p>JS中，我们有很多事情需要异步处理，</p><p>比如：用户执行了表格的刷新，此时没有必要让用户等着，可以先去点别的内容；</p><p>异步就可以帮我们实现这样的场景</p><ul><li><p>定时器</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'就算是定时0，也是异步'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'就算定时0，也是异步'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre></li><li><p>事件处理函数</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我先执行'</span><span class="token punctuation">)</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'绑定事件，需要执行的时候再执行。所以也是异步'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我比事件函数先执行'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 另外送你一个经典示例</span>window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'就算监听页面加载后立刻执行，我还是要等同步代码执行完之后才执行'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre></li><li><p>异步ajax请求</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我先执行'</span><span class="token punctuation">)</span>$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'./xxxUrl'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'得到响应数据后再执行，所以也是异步'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我比ajax的回调先执行'</span><span class="token punctuation">)</span></code></pre></li><li><p>异步回调</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ajax请求的回调</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    url<span class="token punctuation">:</span> <span class="token string">'xxx/api'</span><span class="token punctuation">,</span>    type<span class="token punctuation">:</span><span class="token string">'get'</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ajax请求的回调函数内容'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 事件的回调</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'事件的回调函数内容'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//定时器回调</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'定时器回调内容'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre></li></ul><p><strong>异步代码特点</strong>：==等到所有同步代码执行完成后才开始执行==</p><h3 id="回调地狱（了解）"><a href="#回调地狱（了解）" class="headerlink" title="回调地狱（了解）"></a>回调地狱（了解）</h3><p>我不入地狱，谁入地狱</p><p>回调为我们带来了一种异步解决方案，但是回调的代码结构是交叉的，当回调嵌套较多以后，我们发现代码的文本结构已经变得非常复杂难以维护，下面来体验一下<strong>回调地狱</strong></p><pre class=" language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    url<span class="token punctuation">:</span> <span class="token string">'url1'</span><span class="token punctuation">,</span>    type<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> data        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用第一个请求得到的数据，去请求第二个</span>            url<span class="token punctuation">:</span> <span class="token string">'url2'</span><span class="token punctuation">,</span>            type<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            success<span class="token punctuation">:</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> code <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> data                $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用第二个请求的数据，去请求第三个</span>                    url<span class="token punctuation">:</span> <span class="token string">'url3'</span><span class="token punctuation">,</span>                    type<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>                    data<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> code <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                    success<span class="token punctuation">:</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'终于拿到'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>上面的代码结构缺点：阅读难度极大！</p><h3 id="Promise（重要）"><a href="#Promise（重要）" class="headerlink" title="Promise（重要）"></a>Promise（重要）</h3><p> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise"><code>Promise</code></a> 是一个对象，它代表了一个异步操作的最终完成或者失败。 </p><p> 本质上 Promise 是一个函数返回的对象，我们可以在它上面绑定回调函数，这样我们就不需要在一开始把回调函数作为参数传入这个函数了。 </p><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'返回成功结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'返回失败结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>上面是创建一个promise实例的标准方式</p><p>使用then（后文详解）方法，我们可以得到resolve返回的成功结果</p><h4 id="Promise状态"><a href="#Promise状态" class="headerlink" title="Promise状态"></a>Promise状态</h4><p>​    ==三个状态：==</p><ul><li>​        pending    等待状态</li><li>​         fulfilled    完成状态，成功状态</li><li>​         rejected    拒绝，失败  代表当前promise内部对某些问题的错误处理<ul><li>promise 的状态一旦确定（一旦先调用了res或rej），就不可改变，所以promise的状态流只有两种</li></ul></li></ul><p><strong>promise状态流转有两种：</strong></p><ul><li>pending —&gt; fulfilled（或称resolved）（已成功）</li><li>pending —-&gt; rejected（已失败）</li></ul><p><strong>promise状态有两个特点：</strong></p><ol><li>状态不受外界影响，只由结果决定。</li></ol><ul><li>其实从代码中也能看到，状态完全取决于什么结果去触发resolve方法，什么结果去触发reject方法</li></ul><ol start="2"><li><p>状态不可逆，一旦发生就不再改变，任何时候都可以获得这个结果。</p><ul><li><p>此处可以跟事件监听对比一下，事件监听一旦错过就不能再监听了，比如说：</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'要错过了哟'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 此时页面已经加载完成，再去监听onload事件已经无法执行了</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'页面加载了！'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></code></pre></li></ul></li></ol><h4 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h4><p>基本语法如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'返回成功结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'返回失败结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>分析语法可知：</p><ul><li>使用Promise的方式：new Promise， 初始化一个实例，基于实例去管理异步流程</li><li>Promise类接受一个函数（箭头函数）作为参数，这个函数的两个参数resolve和reject也是两个函数</li><li>resolve函数：当Promise的状态是pending——&gt;已成功（fulfilled），并将操作结果传入到then</li><li>reject函数：当Promise的状态是pending——&gt;已失败（rejected），并将错误传入到catch</li><li>then方法：处理promise结果（成功，也可以接受失败），两个默认参数，都传入回调。第一个函数将resolve返回值作为参数，第二个函数将reject返回的错误作为参数。==但推荐使用catch来接受reject返回的错误==</li><li>catch方法：处理Promise结果（失败），传入一个回调作为参数，将reject返回的错误作为参数</li></ul><p>另外，从语法可以看出，Promise为异步操作提供了一个统一API。（以往事件、异步请求的回调书写方式和位置都不一样，无法统一管理）</p><h4 id="then方法"><a href="#then方法" class="headerlink" title="then方法"></a>then方法</h4><p>语法示例：</p><pre class=" language-javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolved<span class="token punctuation">,</span>rejected<span class="token punctuation">)</span></code></pre><p>then方法用于处理Promise结果，通过指定回调来获得结果（大部分用于处理成功的结果）。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'返回成功的结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'返回失败的结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>then方法第一个参数是resolved状态的回调函数，参数为resolved状态结果</p><p>then方法第二个参数是rejected状态的回调函数，参数为rejected状态的结果</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'返回成功的结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'返回失败的结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//此处接受rejected状态结果</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>不推荐直接在then方法内处理rejected状态，因为无法捕获同为参数的resolved回调中抛出的错误：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'报错了'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>err<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//此处无法捕获错误</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>then方法返回一个<strong>新的</strong>Promise实例，因此then方法可以接着继续调用then，从而形成链式调用：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'返回成功结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'返回失败结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'链式调用成功'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>then方法中：==回调函数返回值会传入下一个then内，若返回promise实例，则下一个then接收到promise实例状态结果==。</p><p>then回调中返回普通值：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>then回调返回promise实例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'报错了'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//此处接受前一个then中promise的状态结果</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p><strong>提问：</strong>如果前一个Promise的状态是rejected会怎么样？动手修改一下看看</p><p>基于then的特性，我们可以非常方便的管理一些复杂的异步过程，比如，三个不同的定时器执行过程需要管理：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 三个不同的定时器，我希望能按照我想要的顺序去执行</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>上面的代码比较繁琐，可以将包含定时器的promise抽象（封装）成一个函数，让代码更简洁，抽象（封装）的原则是：将相同过程封装进函数，不同的地方作为参数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 将过程封装</span><span class="token comment" spellcheck="true">// 需要传递的数据用resolve传递</span><span class="token keyword">function</span> <span class="token function">dealTimer</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>sec<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>sec<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用函数</span><span class="token function">dealTimer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">dealTimer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">dealTimer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>基于上面的过程，可以将前面ajax的回调地狱也封装优化出来：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 封装请求数据的逻辑</span><span class="token keyword">const</span> getData <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            url<span class="token punctuation">,</span>            type<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> params<span class="token punctuation">,</span>            success<span class="token punctuation">:</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 请求成功后把数据传递给下一个 .then()</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'url1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'url2'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id<span class="token punctuation">:</span> data<span class="token punctuation">.</span>id <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'url3'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> code<span class="token punctuation">:</span> data<span class="token punctuation">.</span>code <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'终于拿到'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h4 id="async-—video12"><a href="#async-—video12" class="headerlink" title="async   —video12"></a>async   —video12</h4><ul><li><p>概念：</p><ul><li>用于修饰函数</li><li>async修饰的函数调用后返回一个promise实例</li><li>async修饰的函数内 return数据的情况和then回调内return的体现一致</li></ul></li><li><p>语法：async 函数体</p></li><li><p>语义：告知当前函数体内有异步操作</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">dosth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//函数天生带有返回值，如果没有显式return，则返回undefined</span>            <span class="token comment" spellcheck="true">// return 1   //此处return的数据会作为返回的pormise成功的结果值</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>rej<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">dosth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul><h4 id="await"><a href="#await" class="headerlink" title="await"></a>await</h4><ul><li>概念：用于修饰promise，且await必须在async修饰的函数内使用</li><li>作用：<ul><li>修饰promise时，后续同步代码要等到当前promise状态确定后才能执行</li><li>可以获得promise的成功结果值</li></ul></li></ul><h4 id="async和await的正确使用姿势"><a href="#async和await的正确使用姿势" class="headerlink" title="async和await的正确使用姿势"></a>async和await的正确使用姿势</h4><ol><li>try{…}.catch</li></ol><h4 id="catch方法"><a href="#catch方法" class="headerlink" title="catch方法"></a>catch方法</h4><p>语法示例：</p><pre class=" language-javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>rejected<span class="token punctuation">)</span></code></pre><p>catch方法和then方法一样，参数为函数（回调）。</p><p>catch方法的作用：==指定发生错误时的回调函数，回调函数的参数为【异步执行过程中】抛出来的错误信息==</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Promise本身reject</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 执行过程中的报错（比如then内部抛错）</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aaa <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//因为aaa不存在，所以此处的报错信息会被catch捕获到</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>另外，catch也返回一个新的promise，所以也能进行链式调用，比如前面的ajax请求封装，就可以结合catch来操作，如果过程中有报错就能阻止继续请求下去：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 封装请求数据的逻辑</span><span class="token keyword">const</span> getData <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            url<span class="token punctuation">,</span>            type<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> params<span class="token punctuation">,</span>            success<span class="token punctuation">:</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 请求成功后把数据传递给下一个 .then()</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            error<span class="token punctuation">:</span><span class="token punctuation">(</span>XMLHttpRequert<span class="token punctuation">,</span>textStatus<span class="token punctuation">,</span>errorThrown<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">reject</span><span class="token punctuation">(</span>errorThrown<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加catch捕获错误，这样当其中一个请求发生错误就可以阻止后续的请求进行</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'url1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'url2'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id<span class="token punctuation">:</span> data<span class="token punctuation">.</span>id <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'url3'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> code<span class="token punctuation">:</span> data<span class="token punctuation">.</span>code <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'终于拿到'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h4 id="finally方法（熟悉）"><a href="#finally方法（熟悉）" class="headerlink" title="finally方法（熟悉）"></a>finally方法（熟悉）</h4><p>语法示例：</p><pre class=" language-javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre><p>finally方法的作用：==指定不论Promise结果状态如何，都会执行该方法内部的回调，且该方法的回调不接受任何参数==，这代表finally的执行与状态无关，不依赖Promise的结果</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'最终执行finally'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h4 id="all方法"><a href="#all方法" class="headerlink" title="all方法"></a>all方法</h4><p>语法示例：</p><pre class=" language-javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>由语法可以看出，all方法是Promise类的静态方法</p><p>all方法的作用：==将多个Promise实例包装成一个新的Promise实例，接受一个数组（也可以是 Iterator 数据结构）==，用于批量处理多个Promise实例。</p><ul><li>当所有Promise都fulfilled，则all执行结束状态也是fulfilled，此时所有Promise的成功结果组成数组传递到all执行结束后的then指定的回调</li><li>当其中某个Promise状态为rejected，则将这个Promise的rejected结果传递到all执行结束后的catch指定的回调</li><li>在不关心异步执行顺序和结果时，使用all方法集中管理Promise不失为一个办法</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'p1执行了'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'p2执行了'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//reject('失败了')</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'p3执行了'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// p1,p2,p3全部执行完以后，将成功结果组合为一个数组，传入p的then中</span><span class="token comment" spellcheck="true">// p1,p2,p3其中某一个失败，则停止执行直接将失败结果传入p的catch中</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="race方法"><a href="#race方法" class="headerlink" title="race方法"></a>race方法</h4><p>语法示例：</p><pre class=" language-javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>由语法可以看出，race是Promise的静态方法</p><p>race方法的作用：==在管理多个Promise时，获得最先传递的结果==</p><p>和all一样，race也接受多个Promise组成的数组（也可以是 Iterator 数据结构），但race不会等待所有异步执行完毕，而是拿到最先发生状态改变的Promise的结果就不再接受后续Promise实例的结果值了。</p><p>比如：有时候你希望给某个ajax请求设置超时。</p><p>模拟代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'p1执行了'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'p2执行了'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'p3执行了'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// p1,p2,p3其中某一个率先完成，将结果传入p的then或者catch</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>但是运行上面的代码我们发现这个方法也有点鸡肋，因为这样的超时设置很明显并不合理，如果你设置了两秒超时，但两秒后服务器返回数据了咋弄呢？所以一般都是后端设置超时，通过抛错的方式告知前端</p><h4 id="Promise总结"><a href="#Promise总结" class="headerlink" title="Promise总结"></a>Promise总结</h4><p><strong>Promise的含义</strong>：</p><ul><li>管理异步操作（队列化异步操作）</li><li>用同步的方式编写异步代码</li></ul><p><strong>Promise理解知识点</strong>：</p><ul><li>Promise是一个构造函数，使用new Promise构建一个Promise实例</li><li>Promise有三种状态：进行中（pending）、已成功（fulfilled）、已失败（rejected）<ul><li>结果决定状态，不受其他因素影响</li><li>状态不可逆，一旦发生，不再改变，且任何时候使用回调都可以得到最后结果（注意区别于事件监听）</li></ul></li><li>Promise队列中保存成功或失败时的回调</li><li>原型方法：.then, .catch, .finally</li><li>静态方法：.all，.race</li><li>promise对异步的管理，为我们提供了统一的API规范来书写异步过程，并且让【代码结构】趋于同步</li></ul><h3 id="axios库（重要）"><a href="#axios库（重要）" class="headerlink" title="axios库（重要）"></a>axios库（重要）</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>之前我们学习了jQuery库，它为我们在操作DOM、css、事件等方面提供了极大地遍历，但jQuery对ajax的封装还是显得落后一些（带来回调地狱），所以更推荐使用axios</p><p>axios的定位：面向浏览器和node.js的基于Promise的HTTP请求库</p><p>由于axios基于Promise，我们的ajax请求代码可以变得更优雅，且可以做更细致的控制</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>中文文档地址： <a href="http://www.axios-js.com/">http://www.axios-js.com/</a> </p><p><strong>不会看文档的程序猿不是好程序猿</strong></p><p>使用axios发送一个post请求：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    method<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>    url<span class="token punctuation">:</span> <span class="token string">'/user/12345'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        name<span class="token punctuation">:</span> <span class="token string">'源宝'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 请求成功</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 请求失败或出错</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>不论是代码结构还是结果获取，axios的表现都要优于jQuery。</p><p>另外，axios还提供了单独的get和post方法，让我们更专注请求配置，且url和data分离，让代码结构更美观</p><pre class=" language-javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'url1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'url2'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    params<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id<span class="token punctuation">:</span> data<span class="token punctuation">.</span>id <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'url3'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    params<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> code<span class="token punctuation">:</span> data<span class="token punctuation">.</span>code <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'终于拿到'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>其实从axios的代码结构可以看出，这和我们前面实现的getData很类似，并且更简洁优雅。</p><p>axios还提供了很多其他方法的API，大家参考文档学习掌握</p><h3 id="async和await（重要）"><a href="#async和await（重要）" class="headerlink" title="async和await（重要）"></a>async和await（重要）</h3><p>async翻译为：异步</p><p>await翻译为：等待</p><p>async和await是ES7（ES2017）中提供的新特性，用于进一步完善异步代码的操作。</p><p>关于async和await有几点需要记住：</p><ul><li>async修饰函数，<strong>表明当前函数内有异步操作</strong>，被async修饰的函数称为——async函数</li><li>await<strong>只能在async内使用</strong>，<strong>用于修饰promise</strong>，后面的代码需要等待promise执行结束才执行<ul><li>await也可以修饰基本数据（数字、字符串等等），但被修饰的数据会立刻转换成立即resolved的promise</li></ul></li><li>async函数<strong>返回promise</strong></li></ul><h4 id="async"><a href="#async" class="headerlink" title="async"></a>async</h4><p>async表示函数内有异步操作，其本质是一个语法糖（封装语法），async修饰的函数返回一个promise</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// async修饰一个函数</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 上面的代码等价于</span><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="await-1"><a href="#await-1" class="headerlink" title="await"></a>await</h4><p>await只能在async内使用，用于修饰promise和其他类型（会被转成promise），其作用是使后续代码等待当前promise执行结束</p><p>当我们希望某两个定时器能按照代码先后顺序执行的话就可以使用async和await来实现</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 使用async和await修饰</span>    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async_p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> p1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> p2<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">async_p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="event-loop事件队列（拓展面试题）"><a href="#event-loop事件队列（拓展面试题）" class="headerlink" title="event-loop事件队列（拓展面试题）"></a>event-loop事件队列（拓展面试题）</h4><p>js是一门事件驱动的语言，这里的事件不仅仅包括我们平时理解的click、mouseover等等，还有定时器、promise等；js的代码依靠这些事件来实现异步，那么这些代码是如何执行的呢？</p><p>请注意：event-loop原理，<strong>高端团队面试必问！</strong></p><p>==JS代码在执行之前要将全部代码【<strong>编译</strong>】一次，这其中包括变量提升、任务队列推送等等，当一切准备好以后，就可以开始执行代码了==</p><p><strong>JS事件队列</strong>：</p><ul><li>JS任务分为<strong>同步任务队列</strong>和<strong>异步任务队列</strong><ul><li>异步任务队列又分为：<strong>宏任务</strong>和<strong>微任务</strong></li></ul></li><li>代码执行时，将<strong>同步代码推送到同步任务队列</strong>依次执行；将<strong>异步代码推送到异步任务队列准备起来</strong></li><li>当<strong>同步任务</strong>执行<strong>完成</strong>后，再<strong>将异步队列中的任务推送到同步队列中依次执行</strong></li></ul><p><strong>JS异步队列：</strong></p><ul><li>宏任务——setTimeout、setInterval等<ul><li>当遇到宏任务的时候推送到宏任务队列</li></ul></li><li>微任务——promise.then<ul><li>当遇到微任务的时候会将微任务推送到微任务队列</li></ul></li></ul><p><strong>JS队列执行顺序：</strong></p><ul><li>先执行同步任务</li><li>同步任务结束后，执行一次微任务（将微任务队列清空）</li><li>然后依次执行宏任务，每执行一次宏任务再去微任务队列查看是否有新的微任务，有就清空</li></ul><p>安装：</p><p>   npm i @vue/cli -g</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 高阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS高阶04 智库</title>
      <link href="/2022/01/02/sty04/"/>
      <url>/2022/01/02/sty04/</url>
      
        <content type="html"><![CDATA[<h1 id="课堂知识点智库"><a href="#课堂知识点智库" class="headerlink" title="课堂知识点智库"></a>课堂知识点智库</h1><h2 id="一、高阶"><a href="#一、高阶" class="headerlink" title="一、高阶"></a>一、高阶</h2><h3 id="01-Function-prototype-toString的作用"><a href="#01-Function-prototype-toString的作用" class="headerlink" title="01.Function.prototype.toString的作用"></a>01.Function.prototype.toString的作用</h3><p>返回当前函数代码体的字符串</p><h3 id="02-Function基类的作用"><a href="#02-Function基类的作用" class="headerlink" title="02. Function基类的作用"></a>02. Function基类的作用</h3><p>new Function([arg1,arg2…],functionBody)可以创建一个function函数，且设置参数</p><h3 id="03-JavaScript和ECMAscript的关系？"><a href="#03-JavaScript和ECMAscript的关系？" class="headerlink" title="03. JavaScript和ECMAscript的关系？"></a>03. JavaScript和ECMAscript的关系？</h3><p>JavaScript是语言<br>ECMAscript是规范</p><h3 id="04-javascript中对象被销毁的标致是什么？"><a href="#04-javascript中对象被销毁的标致是什么？" class="headerlink" title="04.javascript中对象被销毁的标致是什么？"></a>04.javascript中对象被销毁的标致是什么？</h3><p>当对象不再引用的时候，就被销毁了，比如a={name:‘张三’},如果为a赋值为null，则{name：‘张三’}就被销毁了</p><h3 id="05-ES6解构赋值的核心是什么？"><a href="#05-ES6解构赋值的核心是什么？" class="headerlink" title="05.ES6解构赋值的核心是什么？"></a>05.ES6解构赋值的核心是什么？</h3><p>变量所处结构目标数据结构一模一样<br>数组解构小细节：<br>跳过成员解构，使用空白加逗号</p><h3 id="06-扩展运算符特性"><a href="#06-扩展运算符特性" class="headerlink" title="06.扩展运算符特性"></a>06.扩展运算符特性</h3><p>1.可以展开字符串<br>2.可以展开数组<br>3.可以展开对象<br>(1)必须在一个对象内展开另一个对象</p><h3 id="07-Object-assign的作用"><a href="#07-Object-assign的作用" class="headerlink" title="07.Object.assign的作用"></a>07.Object.assign的作用</h3><p>1.语法：Object.assign(target,source1,source2…)<br>2.定义：将所有可枚举属性从一个或多个源对象身上分配给目标对象，且返回目标对象本身！</p><h3 id="08-class类中原型方法的内部this有什么特点？"><a href="#08-class类中原型方法的内部this有什么特点？" class="headerlink" title="08. class类中原型方法的内部this有什么特点？"></a>08. class类中原型方法的内部this有什么特点？</h3><p>3.Class类原型方法在调用的时候必须显式指明this指向，否则内部this为undefined</p><h3 id="09-Object-create的作用是什么？"><a href="#09-Object-create的作用是什么？" class="headerlink" title="09. Object.create的作用是什么？"></a>09. Object.create的作用是什么？</h3><p>1.语法：Object.create(protoObj)<br>2.概念：<br>(1)创建一个对象<br>(2)将参数中的对象设置为创建出来的对象的原型</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 高阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 高阶01 闭包</title>
      <link href="/2022/01/02/sty01/"/>
      <url>/2022/01/02/sty01/</url>
      
        <content type="html"><![CDATA[<h1 id="JS高级-DAY01"><a href="#JS高级-DAY01" class="headerlink" title="JS高级-DAY01"></a>JS高级-DAY01</h1><h2 id="1-今日目标"><a href="#1-今日目标" class="headerlink" title="1 今日目标"></a>1 今日目标</h2><ul><li>执行环境和作用域 [ 理解  - 5%]</li><li>函数进阶 [重点 - 使用熟练 - 45%]</li><li>闭包[重点 - 理解清晰 - 50%]</li></ul><h2 id="2-执行环境和变量对象和作用域-理解"><a href="#2-执行环境和变量对象和作用域-理解" class="headerlink" title="2 执行环境和变量对象和作用域 [ 理解 ]"></a>2 <code>执行环境</code>和<code>变量对象</code>和<code>作用域</code> [ 理解 ]</h2><h3 id="2-1-执行环境-了解"><a href="#2-1-执行环境-了解" class="headerlink" title="2.1 执行环境 [ 了解 ]"></a>2.1 执行环境 [ 了解 ]</h3><ul><li>人类生活的环境是: <code>地球</code>, 我们学习的环境是: <code>教室</code>, 那么, 代码执行,也有自己的一个环境, 就是: <code>执行环境</code></li><li>JS中的代码执行,有 2 种<code>执行环境</code><ul><li><code>全局执行环境</code> ( 默认 )</li><li><code>函数执行环境</code> ( 调用函数的时候, 就会创建函数的执行环境. )</li></ul></li><li>js的执行环境,会被放入一个栈中, 默认栈中放的是<code>全局执行环境</code>, 当有函数调用, 就会创建函数的执行环境,且把这个执行环境推入栈中.   ( 栈:  执行环境栈 或  调用栈 )</li></ul><h3 id="2-2-变量对象-了解"><a href="#2-2-变量对象-了解" class="headerlink" title="2.2 变量对象[了解]"></a>2.2 变量对象[了解]</h3><ul><li><p>每个执行环境,都会关联一个看不见的 <code>变量对象</code></p></li><li><p>变量对象,存着这个执行环境中的所有<code>标识符</code></p></li><li><p><code>标识符</code>:  变量名 / 函数名 / 形参 / 对象的键名</p></li><li><p>当执行环境销毁, 关联的变量对象也会把所有标识符销毁.</p></li></ul><h3 id="2-3-作用域-掌握"><a href="#2-3-作用域-掌握" class="headerlink" title="2.3 作用域 [掌握]"></a>2.3 作用域 [掌握]</h3><h4 id="2-3-1-概念"><a href="#2-3-1-概念" class="headerlink" title="2.3.1 概念"></a>2.3.1 概念</h4><p><code>标识符</code>可以使用的范围   [ 自己作用域和子作用域 ]</p><h4 id="2-3-2-作用域链"><a href="#2-3-2-作用域链" class="headerlink" title="2.3.2 作用域链"></a>2.3.2 作用域链</h4><p>提供了一套规则, 从里往外查找标识符, 找到就可以使用,找不到就报错.</p><p>正是有了作用域链的查找规则, 所有就有了作用域.</p><h4 id="2-3-3-作用域分类"><a href="#2-3-3-作用域分类" class="headerlink" title="2.3.3 作用域分类"></a>2.3.3 作用域分类</h4><ul><li>全局</li><li>局部(函数)</li><li>块级  [ ES6才有的块级 ]</li></ul><h2 id="3-函数进阶-重点-熟练使用"><a href="#3-函数进阶-重点-熟练使用" class="headerlink" title="3 函数进阶[重点 - 熟练使用]"></a>3 函数进阶[重点 - 熟练使用]</h2><h3 id="3-1-函数的写法-重点"><a href="#3-1-函数的写法-重点" class="headerlink" title="3.1 函数的写法 [重点]"></a>3.1 函数的写法 [重点]</h3><ul><li><p>声明式写法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>形参<span class="token number">1</span><span class="token punctuation">,</span> 形参<span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 代码 */</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>表达式写法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> 变量 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>形参<span class="token number">1</span><span class="token punctuation">,</span> 形参<span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 代码 */</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>箭头函数 [ 30个箭头函数 ]</p><ul><li>形参有且只有1个,<code>可省略</code>()    [ 也可以不省略 ]</li><li>代码只有1局,<code>可省略</code>{}, 且必须省略return, 会自动return    [ 也可以不省略 ]</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> 变量 <span class="token operator">=</span> <span class="token punctuation">(</span>形参<span class="token number">1</span><span class="token punctuation">,</span> 形参<span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 代码 */</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="3-2-函数的参数-重点"><a href="#3-2-函数的参数-重点" class="headerlink" title="3.2 函数的参数[重点]"></a>3.2 函数的参数[重点]</h3><ul><li><p>实参和形参[重点]</p><ul><li>形参:  占位使用, 要语义化. 叫啥都行.</li><li>实参:   调用函数,实际传入的参数, 传啥都行, <code>实参</code>传递什么给形参, <code>形参</code>就是你传入的东西.</li></ul></li><li><p>默认参数[重点]</p><ul><li><p>es5</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>形参<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> 变量 <span class="token operator">=</span> 形参 <span class="token operator">||</span> 默认值<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>es6</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>形参 <span class="token operator">=</span> 默认值<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>arguments[了解]</p><ul><li>在函数内部可以直接获取到, 获取到所有实参, 结果是:<code>伪数组</code>.</li><li>作用:  不能确定参数个数的情况</li></ul></li><li><p>rest剩余参数 [重点]</p><ul><li><p>es6推出的, 叫: 剩余参数. 用来取代arguments.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>形参<span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>形参<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 形参1: 得到实参1</span>    <span class="token comment" spellcheck="true">// 形参: 得到 [实参2, 实参3, 实参4]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">函数名</span><span class="token punctuation">(</span>实参<span class="token number">1</span><span class="token punctuation">,</span> 实参<span class="token number">2</span><span class="token punctuation">,</span> 实参<span class="token number">3</span><span class="token punctuation">,</span> 实参<span class="token number">4</span><span class="token punctuation">)</span></code></pre></li></ul></li></ul><h3 id="3-3-函数的返回值-重点"><a href="#3-3-函数的返回值-重点" class="headerlink" title="3.3 函数的返回值[重点]"></a>3.3 函数的返回值[重点]</h3><ul><li><p>函数没有return, 默认<code>return undefined</code></p></li><li><p>函数返回啥,就得到啥.</p></li><li><p>哪里调用函数, 函数的返回值,就返回到那里去.</p></li><li><p>函数都要return吗?</p><ul><li><p>如果调用一个函数, 只是让它干一件事, 干就完了, 不要结果, 就不需要return</p><ul><li><p>渲染函数.</p></li><li><p>弹窗函数</p></li></ul></li><li><p>如果调用一个函数, 需要它把结果汇报给你, 要使用变量接收这个结果, 把结果用在别的地方.</p><ul><li>求和</li><li>获取年月日</li></ul></li></ul></li></ul><h3 id="3-4-函数的调用-重点"><a href="#3-4-函数的调用-重点" class="headerlink" title="3.4 函数的调用[重点]"></a>3.4 函数的调用[重点]</h3><ul><li><p>直接调用    -  直调 [重点]</p><pre class=" language-js"><code class="language-js"><span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>对象调用方法  -  对调 [重点]</p><pre class=" language-js"><code class="language-js">对象<span class="token punctuation">.</span><span class="token function">方法</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>回调函数:  当满足一定条件,自动调用执行 -  回调 [重点]</p><pre class=" language-js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre></li><li><p>IIFE立即执行函数表达式 - 自调 [理解]</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'666'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul><h2 id="4-闭包-重点-理解清晰"><a href="#4-闭包-重点-理解清晰" class="headerlink" title="4 闭包[重点 - 理解清晰]"></a>4 闭包[重点 - 理解清晰]</h2><h3 id="4-1-闭包的概念"><a href="#4-1-闭包的概念" class="headerlink" title="4.1 闭包的概念"></a>4.1 闭包的概念</h3><ul><li><p>函数跨作用域访问变量,形成闭包. 闭包是一种作用域的体现. 一般把: <code>函数</code> 和 <code>变量</code> 的总和,称为闭包.</p><pre class=" language-js"><code class="language-js">闭包 <span class="token operator">=</span> spendMoney <span class="token operator">+</span> money</code></pre></li></ul><h3 id="4-2-闭包的标准写法"><a href="#4-2-闭包的标准写法" class="headerlink" title="4.2 闭包的标准写法"></a>4.2 闭包的标准写法</h3><ul><li><p>闭包的写法是:  父函数嵌套子函数, 子函数访问父函数的变量,把子函数返回或挂在全局.</p><ul><li><p>写法一:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> 变量 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">父函数</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> 变量    <span class="token keyword">function</span> <span class="token function">子函数</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>变量<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> 子函数<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>写法二:</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">父函数</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> 变量    <span class="token keyword">function</span> <span class="token function">子函数</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>变量<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span>属性名  <span class="token operator">=</span> 子函数<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li></ul><h3 id="4-3-闭包的作用"><a href="#4-3-闭包的作用" class="headerlink" title="4.3 闭包的作用"></a>4.3 闭包的作用</h3><ul><li><p>核心作用:</p><ul><li><p>闭包: 把变量封闭包裹在一个匿名函数内部, <code>隐藏变量或私有化变量</code>, 实现<code>早期的模块化</code></p><p>[es6自带模块化 把这种方式取代了]</p></li></ul></li></ul><h3 id="4-4-闭包的缺点"><a href="#4-4-闭包的缺点" class="headerlink" title="4.4 闭包的缺点"></a>4.4 闭包的缺点</h3><ul><li>形成闭包的变量,不会被内存释放, 不会被js的垃圾回收机制回收, 常驻内存, 过多使用闭包, 造成内存开销过大,甚至内存泄漏.</li></ul><h2 id="5-今日作业"><a href="#5-今日作业" class="headerlink" title="5 今日作业"></a>5 今日作业</h2><ul><li>课堂代码1遍</li><li>箭头函数30个</li><li>课后习题 第 2 题.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 高阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 高阶02面向过程和对象</title>
      <link href="/2022/01/02/sty02/"/>
      <url>/2022/01/02/sty02/</url>
      
        <content type="html"><![CDATA[<h1 id="JS高级"><a href="#JS高级" class="headerlink" title="JS高级"></a>JS高级</h1><h2 id="2-面向对象和面向过程-了解"><a href="#2-面向对象和面向过程-了解" class="headerlink" title="2 面向对象和面向过程[了解]"></a>2 面向对象和面向过程[了解]</h2><h3 id="2-1-面向对象和面向过程-了解"><a href="#2-1-面向对象和面向过程-了解" class="headerlink" title="2.1 面向对象和面向过程[了解]"></a>2.1 面向对象和面向过程[了解]</h3><ul><li>面向过程(POP):  按照流程, 一步一步的做, 所有步骤亲力亲为, 小兵思维.</li><li>面向对象(OOP):  把功能封装成对象, 要做什么找对象,调用对象的方法, 指挥者的思维, 将军思维</li></ul><h3 id="2-2-类和实例对象"><a href="#2-2-类和实例对象" class="headerlink" title="2.2 类和实例对象"></a>2.2 类和实例对象</h3><ul><li>类(构造函数):  一个大的分类:  人/动物/车/程序员/格子衫      数组  对象  字符串  数字  日期</li><li>实例对象: 一个非常具体的对象:  小貂蝉 18 5224577   川A666 丰田 AE86        [1,2,3] { name: ‘小貂蝉’ }</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> 实例对象 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">类</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// const arr = new Array([1,2,3])  const o = new Object()</span></code></pre><h2 id="3-构造函数-掌握"><a href="#3-构造函数-掌握" class="headerlink" title="3 构造函数[掌握]"></a>3 构造函数[掌握]</h2><ul><li><p>在es5中, js没有类, 所以使用 <code>构造函数代表类</code> </p></li><li><p>JS有内置的构造函数(类)</p><ul><li><p>Object</p></li><li><p>Array</p></li><li><p>Number</p></li><li><p>String</p></li><li><p>Date</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 实例化对象( 使用new 调用构造函数 创建出实例对象 )</span><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>我们可以自己写构造函数( 自己写类 )</p><ul><li>构造函数的特点<ul><li>函数名大写字母开头</li><li>属性和方法都挂在this上</li><li>没有返回值</li><li>使用new调用</li></ul></li></ul><pre class=" language-js"><code class="language-js"># 自己写一个构造函数 <span class="token punctuation">(</span> 除了内置的构造函数之外 我们可以自己写 然后使用 <span class="token keyword">new</span> 来调用 <span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 人类 ( 人的构造函数 )</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 给this添加属性 </span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给this添加方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">'干饭'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 车类 ( 车的构造函数 )</span><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 给this添加属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给this添加方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>startup <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">'启动'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p><code>new的过程</code></p><ul><li>创建一个空对象</li><li>让this指向空对象</li><li>执行构造函数代码</li><li>自动返回this</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 人类 ( 人的构造函数 )</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 给this添加属性 </span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给this添加方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">'干饭'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建实例对象</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'小貂蝉'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">)</span></code></pre></li></ul><h2 id="4-原型Prototype和原型链-重点"><a href="#4-原型Prototype和原型链-重点" class="headerlink" title="4 原型Prototype和原型链[重点]"></a>4 原型Prototype和原型链[重点]</h2><h3 id="4-1-方法过载-了解"><a href="#4-1-方法过载-了解" class="headerlink" title="4.1 方法过载[了解]"></a>4.1 方法过载[了解]</h3><ul><li>new出来的实例对象, 每个实例对象,都有一份自己的方法,称为 <code>方法过载</code>,内存开销过大.</li></ul><h3 id="4-2-原型prototype-重点"><a href="#4-2-原型prototype-重点" class="headerlink" title="4.2 原型prototype[重点]"></a>4.2 原型prototype[重点]</h3><ul><li>[1] 每个函数,特指构造函数,都有一个属性prototype,就是原型( 显式原型 )</li><li>[2] 原型prototype是一个对象, 添加在里面的方法,被所有new出来的实例对象共享.</li><li>[3] 实例对象,都有一个属性<code>__proto__(隐式原型)</code>, 等于自己构造函数的<code>prototype(显式原型)</code> </li><li>[4] 原型prototype里面有一个属性<code>constructor</code>, 指向构造函数本身.</li></ul><h3 id="4-3-原型的作用-重点"><a href="#4-3-原型的作用-重点" class="headerlink" title="4.3 原型的作用[重点]"></a>4.3 原型的作用[重点]</h3><ul><li>添加共享方法.</li></ul><h3 id="4-4-原型链-重点"><a href="#4-4-原型链-重点" class="headerlink" title="4.4 原型链[重点]"></a>4.4 原型链[重点]</h3><ul><li>[5] 原型prototype本身也是一个实例对象, 也有<code>__proto__</code>, 指向自己构造函数Object的<code>prototype</code></li><li>[6] Object的prototype也是实例对象, 也有<code>__proto__</code>, 指向null</li><li>[7] Object的prototype也有属性<code>constructor</code>, 指向构造函数<code>Object</code>本身.</li></ul><h3 id="4-5-原型链的作用"><a href="#4-5-原型链的作用" class="headerlink" title="4.5 原型链的作用"></a>4.5 原型链的作用</h3><ul><li>添加共享方法</li><li>实例对象查找方法,先找自己,自己没有,就沿着原型链往上找,找到就可以调用,直到<code>Object.prototype</code>找不到就报错.</li></ul><h2 id="5-this-重点-分析面试题"><a href="#5-this-重点-分析面试题" class="headerlink" title="5 this[重点 - 分析面试题]"></a>5 this[重点 - 分析面试题]</h2><h3 id="5-1-this的指向"><a href="#5-1-this的指向" class="headerlink" title="5.1 this的指向"></a>5.1 this的指向</h3><ul><li>全局this:     <code>window</code></li><li>函数中的this:  <code>谁调用,指向谁</code></li><li>对象方法中的this:  <code>谁调用,指向谁</code></li><li>构造函数中的this:   <code>实例对象</code></li><li>事件处理函数中的this:  <code>事件源</code></li><li>定时器中的this:  <code>window</code></li><li>箭头函数中的this:  <code>上一级</code> ( 箭头函数没有this, 它的this绑定定义函数时所处的作用域 )</li></ul><h3 id="5-2-3个改变this指向的方法"><a href="#5-2-3个改变this指向的方法" class="headerlink" title="5.2 3个改变this指向的方法"></a>5.2 3个改变this指向的方法</h3><ol><li>伪数组转变成真数组的方法</li></ol><ul><li><p>call() 和 apply()</p><ul><li>区别:  功能一模一样, 唯一的区别是传递参数方式不同.</li></ul><pre class=" language-js"><code class="language-js"># 语法函数<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span>指向<span class="token punctuation">,</span> 实参<span class="token number">1</span><span class="token punctuation">,</span> 实参<span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 调用函数 且 指定this  第一个参数用来改变this指向，不需要形参来接收</span>函数<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span>指向<span class="token punctuation">,</span> <span class="token punctuation">[</span>实参<span class="token number">1</span><span class="token punctuation">,</span> 实参<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调用函数 且 指定this</span>传实际参数的格式不一样哦！</code></pre></li><li><p>bind()</p><ul><li>把函数的this绑定到一个目标对象,然后返回一个新函数, 此后,只要调用新函数, this就固定了,指向之前绑定的目标对象.</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> 新函数 <span class="token operator">=</span> 函数<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span>指向<span class="token punctuation">)</span><span class="token function">新函数</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 高阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 高阶03 深浅拷贝</title>
      <link href="/2022/01/02/sty03/"/>
      <url>/2022/01/02/sty03/</url>
      
        <content type="html"><![CDATA[<h1 id="JS-Day03"><a href="#JS-Day03" class="headerlink" title="JS  Day03"></a>JS  Day03</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>闭包是什么：函数 + 函数内部跨坐用域访问的变量</p><h2 id="（一）基本类型-amp-引用类型在内存中存储"><a href="#（一）基本类型-amp-引用类型在内存中存储" class="headerlink" title="（一）基本类型 &amp; 引用类型在内存中存储"></a>（一）基本类型 &amp; 引用类型在内存中存储</h2><ul><li>基本类型（7）：number、string、boolean、undefined、null、Symbol（唯一的值）、BigInt（大整数）</li><li>引用类型（1）：Object（数组、对象、函数、RegExp、Date、Math、Map、WeakMap、Set…）</li></ul><h3 id="内存存储"><a href="#内存存储" class="headerlink" title="内存存储"></a>内存存储</h3><ul><li>所有的基本数据类型，值都存在【栈内存中】</li><li>引用数据类型，数据存在【堆内存】中，地址存在【栈内存】中，通过地址可以找到堆中的数据</li></ul><p>了解：</p><ul><li>栈：容量小，存的位数固定大小，一般是系统自动分配</li><li>堆：容量大，可以灵活扩充，根据程序主动分配的</li></ul><h3 id="变量的拷贝"><a href="#变量的拷贝" class="headerlink" title="变量的拷贝"></a>变量的拷贝</h3><ul><li>对于基本数据类型，拷贝的是值（拷贝以后，互相不影响）</li><li>对于引用数据类型，拷贝的是地址（拷贝后，按相同地址访问的数据，互相影响）</li></ul><h3 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h3><p>函数传参就相当于变量的拷贝（把函数外面的变量拷贝给函数参数）</p><h2 id="（二）对象的深-浅拷贝"><a href="#（二）对象的深-浅拷贝" class="headerlink" title="（二）对象的深/浅拷贝"></a>（二）对象的深/浅拷贝</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    obj<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        a<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            b<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                c<span class="token punctuation">:</span> <span class="token number">1</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>深拷贝：无限层级的拷贝（有多少层拷多少层，永远拷贝的都是值）</li><li>浅拷贝：只考一层，遇到基本数据类型，拷值，遇到引用数据类型，考地址</li></ul><h3 id="4-种拷贝的方式"><a href="#4-种拷贝的方式" class="headerlink" title="4 种拷贝的方式"></a>4 种拷贝的方式</h3><ol><li>for-in 拷贝 1 层，浅拷贝</li><li>Object.assign() 浅拷贝</li><li>JSON 方法，深拷贝，缺陷：不能拷贝对象的方法</li><li>完美深拷贝。Lodash 工具库 _.cloneDeep() 深拷贝，可以拷贝函数</li></ol><p>深拷贝：特点，新旧对象互不影响<br>浅拷贝：特点，拷贝后，基本数据类型的属性，不影响，引用数据类型，因为拷贝的是地址，所以会互相影响</p><h2 id="（三）变量类型检测"><a href="#（三）变量类型检测" class="headerlink" title="（三）变量类型检测"></a>（三）变量类型检测</h2><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>检测基本数据类型准确，特例，<code>typeof null === &#39;object&#39;</code></p><p><code>typeof function() &#123;&#125; === &#39;function&#39;</code></p><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>语法：变量（实例）instanceof 构造函数<br>原理：判断 构造函数的原型 是否在 实例的原型链上</p><h3 id="Array-isArray-静态方法"><a href="#Array-isArray-静态方法" class="headerlink" title="Array.isArray - 静态方法"></a>Array.isArray - 静态方法</h3><p>Object.assign</p><p>专门用来判断数组类型：<code>log(Array.isArray([])); // true</code></p><h3 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call"></a>Object.prototype.toString.call</h3><p>最准确</p><p>Object.prototype.toString.call() 是把数据的类型信息以字符串显示，格式 ‘[object Type]’</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承可以使子类拥有父类的一切特征（属性和方法），并可以在子类上继续重新定义、追加属性和方法。</p><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><p>核心思想：让子类的原型 = 父类的实例，本质上【重写了原型对象】</p><p>问题（缺陷）：如果修改了父类的原型，所有子类实例都受影响，无论是否是新创建</p><p>原因：原型的作用：原型被所有实例所共享</p><h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><p>思想 2 块：</p><ul><li>组合式（重要）<ul><li>对于属性：继承的属性应该挂到子类【实例】上。在子类构造函数中调用父类构造函数，来继承属性</li><li>对于方法：继承的方法应该挂到【原型链】上。通过 Object.create() 构造了原型的指向关系</li></ul></li><li>寄生：通过 Object.create() 避免了 1 次不必要的父类构造函数的调用，直接共享父类原型方法</li></ul><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><ol><li>代码</li><li>选择题</li><li>深拷贝</li><li>面试题</li></ol><h2 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h2><ul><li>《JavaScript 高级程序设计 4版》- 红宝书，不适合从头看到尾，适合当做深入学习某一个模块去学：<a href="https://item.jd.com/12958580.html">https://item.jd.com/12958580.html</a></li><li>《JavaScript 权威指南》犀牛书，和高程类似，买1本就行，犀牛书偏工具书，不太推荐初学的。<a href="https://item.jd.com/10027630697881.html">https://item.jd.com/10027630697881.html</a></li><li>《JavaScript 忍者秘籍》：适合工作以后，对 JS 进行进阶，达到 熟练程度以上。<a href="https://item.jd.com/27788734578.html">https://item.jd.com/27788734578.html</a></li><li>《JavaScript 语言精粹》：胡蝶书。平时适合看得，比较简单，且薄。<a href="https://item.jd.com/12809957.html">https://item.jd.com/12809957.html</a> 适合 JS 进阶</li><li>不推荐：《你不知道的 JavaScript》：黄宝书，语言描述很绕。</li><li>《编写高可维护的 JavaScript》乌龟书：很薄，一下午能看完。工作前看：树立编码规范意识。<a href="https://item.jd.com/11193885.html">https://item.jd.com/11193885.html</a></li></ul><p>如果你以后的工作要深入 CSS：《CSS 揭秘》：<a href="https://item.jd.com/13305034.html">https://item.jd.com/13305034.html</a></p><p>react  《深入 react  技术栈》强推</p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul><li>MDN（找JSAPI）：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign</a></li><li>阮一峰《ES6入门指南》：<a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></li></ul><h3 id="各种方法"><a href="#各种方法" class="headerlink" title="各种方法"></a>各种方法</h3><p>React 关键：</p><ul><li>实例方法：实例对象上的方法（构造函数中 this 上的方法）</li><li>原型方法：原型对象上的方法（构造函数.prototype.方法，可以被所有实例所共享）</li><li>静态方法：构造函数.方法</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 高阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到我的博客</title>
      <link href="/2022/01/02/hello-world/"/>
      <url>/2022/01/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
