<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS 高阶01 闭包</title>
      <link href="/2022/01/02/sty01/"/>
      <url>/2022/01/02/sty01/</url>
      
        <content type="html"><![CDATA[<h1 id="JS高级-DAY01"><a href="#JS高级-DAY01" class="headerlink" title="JS高级-DAY01"></a>JS高级-DAY01</h1><h2 id="1-今日目标"><a href="#1-今日目标" class="headerlink" title="1 今日目标"></a>1 今日目标</h2><ul><li>执行环境和作用域 [ 理解  - 5%]</li><li>函数进阶 [重点 - 使用熟练 - 45%]</li><li>闭包[重点 - 理解清晰 - 50%]</li></ul><h2 id="2-执行环境和变量对象和作用域-理解"><a href="#2-执行环境和变量对象和作用域-理解" class="headerlink" title="2 执行环境和变量对象和作用域 [ 理解 ]"></a>2 <code>执行环境</code>和<code>变量对象</code>和<code>作用域</code> [ 理解 ]</h2><h3 id="2-1-执行环境-了解"><a href="#2-1-执行环境-了解" class="headerlink" title="2.1 执行环境 [ 了解 ]"></a>2.1 执行环境 [ 了解 ]</h3><ul><li>人类生活的环境是: <code>地球</code>, 我们学习的环境是: <code>教室</code>, 那么, 代码执行,也有自己的一个环境, 就是: <code>执行环境</code></li><li>JS中的代码执行,有 2 种<code>执行环境</code><ul><li><code>全局执行环境</code> ( 默认 )</li><li><code>函数执行环境</code> ( 调用函数的时候, 就会创建函数的执行环境. )</li></ul></li><li>js的执行环境,会被放入一个栈中, 默认栈中放的是<code>全局执行环境</code>, 当有函数调用, 就会创建函数的执行环境,且把这个执行环境推入栈中.   ( 栈:  执行环境栈 或  调用栈 )</li></ul><h3 id="2-2-变量对象-了解"><a href="#2-2-变量对象-了解" class="headerlink" title="2.2 变量对象[了解]"></a>2.2 变量对象[了解]</h3><ul><li><p>每个执行环境,都会关联一个看不见的 <code>变量对象</code></p></li><li><p>变量对象,存着这个执行环境中的所有<code>标识符</code></p></li><li><p><code>标识符</code>:  变量名 / 函数名 / 形参 / 对象的键名</p></li><li><p>当执行环境销毁, 关联的变量对象也会把所有标识符销毁.</p></li></ul><h3 id="2-3-作用域-掌握"><a href="#2-3-作用域-掌握" class="headerlink" title="2.3 作用域 [掌握]"></a>2.3 作用域 [掌握]</h3><h4 id="2-3-1-概念"><a href="#2-3-1-概念" class="headerlink" title="2.3.1 概念"></a>2.3.1 概念</h4><p><code>标识符</code>可以使用的范围   [ 自己作用域和子作用域 ]</p><h4 id="2-3-2-作用域链"><a href="#2-3-2-作用域链" class="headerlink" title="2.3.2 作用域链"></a>2.3.2 作用域链</h4><p>提供了一套规则, 从里往外查找标识符, 找到就可以使用,找不到就报错.</p><p>正是有了作用域链的查找规则, 所有就有了作用域.</p><h4 id="2-3-3-作用域分类"><a href="#2-3-3-作用域分类" class="headerlink" title="2.3.3 作用域分类"></a>2.3.3 作用域分类</h4><ul><li>全局</li><li>局部(函数)</li><li>块级  [ ES6才有的块级 ]</li></ul><h2 id="3-函数进阶-重点-熟练使用"><a href="#3-函数进阶-重点-熟练使用" class="headerlink" title="3 函数进阶[重点 - 熟练使用]"></a>3 函数进阶[重点 - 熟练使用]</h2><h3 id="3-1-函数的写法-重点"><a href="#3-1-函数的写法-重点" class="headerlink" title="3.1 函数的写法 [重点]"></a>3.1 函数的写法 [重点]</h3><ul><li><p>声明式写法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>形参<span class="token number">1</span><span class="token punctuation">,</span> 形参<span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 代码 */</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>表达式写法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> 变量 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>形参<span class="token number">1</span><span class="token punctuation">,</span> 形参<span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 代码 */</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>箭头函数 [ 30个箭头函数 ]</p><ul><li>形参有且只有1个,<code>可省略</code>()    [ 也可以不省略 ]</li><li>代码只有1局,<code>可省略</code>{}, 且必须省略return, 会自动return    [ 也可以不省略 ]</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> 变量 <span class="token operator">=</span> <span class="token punctuation">(</span>形参<span class="token number">1</span><span class="token punctuation">,</span> 形参<span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 代码 */</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="3-2-函数的参数-重点"><a href="#3-2-函数的参数-重点" class="headerlink" title="3.2 函数的参数[重点]"></a>3.2 函数的参数[重点]</h3><ul><li><p>实参和形参[重点]</p><ul><li>形参:  占位使用, 要语义化. 叫啥都行.</li><li>实参:   调用函数,实际传入的参数, 传啥都行, <code>实参</code>传递什么给形参, <code>形参</code>就是你传入的东西.</li></ul></li><li><p>默认参数[重点]</p><ul><li><p>es5</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>形参<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> 变量 <span class="token operator">=</span> 形参 <span class="token operator">||</span> 默认值<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>es6</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>形参 <span class="token operator">=</span> 默认值<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>arguments[了解]</p><ul><li>在函数内部可以直接获取到, 获取到所有实参, 结果是:<code>伪数组</code>.</li><li>作用:  不能确定参数个数的情况</li></ul></li><li><p>rest剩余参数 [重点]</p><ul><li><p>es6推出的, 叫: 剩余参数. 用来取代arguments.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>形参<span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>形参<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 形参1: 得到实参1</span>    <span class="token comment" spellcheck="true">// 形参: 得到 [实参2, 实参3, 实参4]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">函数名</span><span class="token punctuation">(</span>实参<span class="token number">1</span><span class="token punctuation">,</span> 实参<span class="token number">2</span><span class="token punctuation">,</span> 实参<span class="token number">3</span><span class="token punctuation">,</span> 实参<span class="token number">4</span><span class="token punctuation">)</span></code></pre></li></ul></li></ul><h3 id="3-3-函数的返回值-重点"><a href="#3-3-函数的返回值-重点" class="headerlink" title="3.3 函数的返回值[重点]"></a>3.3 函数的返回值[重点]</h3><ul><li><p>函数没有return, 默认<code>return undefined</code></p></li><li><p>函数返回啥,就得到啥.</p></li><li><p>哪里调用函数, 函数的返回值,就返回到那里去.</p></li><li><p>函数都要return吗?</p><ul><li><p>如果调用一个函数, 只是让它干一件事, 干就完了, 不要结果, 就不需要return</p><ul><li><p>渲染函数.</p></li><li><p>弹窗函数</p></li></ul></li><li><p>如果调用一个函数, 需要它把结果汇报给你, 要使用变量接收这个结果, 把结果用在别的地方.</p><ul><li>求和</li><li>获取年月日</li></ul></li></ul></li></ul><h3 id="3-4-函数的调用-重点"><a href="#3-4-函数的调用-重点" class="headerlink" title="3.4 函数的调用[重点]"></a>3.4 函数的调用[重点]</h3><ul><li><p>直接调用    -  直调 [重点]</p><pre class=" language-js"><code class="language-js"><span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>对象调用方法  -  对调 [重点]</p><pre class=" language-js"><code class="language-js">对象<span class="token punctuation">.</span><span class="token function">方法</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>回调函数:  当满足一定条件,自动调用执行 -  回调 [重点]</p><pre class=" language-js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre></li><li><p>IIFE立即执行函数表达式 - 自调 [理解]</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'666'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul><h2 id="4-闭包-重点-理解清晰"><a href="#4-闭包-重点-理解清晰" class="headerlink" title="4 闭包[重点 - 理解清晰]"></a>4 闭包[重点 - 理解清晰]</h2><h3 id="4-1-闭包的概念"><a href="#4-1-闭包的概念" class="headerlink" title="4.1 闭包的概念"></a>4.1 闭包的概念</h3><ul><li><p>函数跨作用域访问变量,形成闭包. 闭包是一种作用域的体现. 一般把: <code>函数</code> 和 <code>变量</code> 的总和,称为闭包.</p><pre class=" language-js"><code class="language-js">闭包 <span class="token operator">=</span> spendMoney <span class="token operator">+</span> money</code></pre></li></ul><h3 id="4-2-闭包的标准写法"><a href="#4-2-闭包的标准写法" class="headerlink" title="4.2 闭包的标准写法"></a>4.2 闭包的标准写法</h3><ul><li><p>闭包的写法是:  父函数嵌套子函数, 子函数访问父函数的变量,把子函数返回或挂在全局.</p><ul><li><p>写法一:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> 变量 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">父函数</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> 变量    <span class="token keyword">function</span> <span class="token function">子函数</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>变量<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> 子函数<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>写法二:</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">父函数</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> 变量    <span class="token keyword">function</span> <span class="token function">子函数</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>变量<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span>属性名  <span class="token operator">=</span> 子函数<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li></ul><h3 id="4-3-闭包的作用"><a href="#4-3-闭包的作用" class="headerlink" title="4.3 闭包的作用"></a>4.3 闭包的作用</h3><ul><li><p>核心作用:</p><ul><li><p>闭包: 把变量封闭包裹在一个匿名函数内部, <code>隐藏变量或私有化变量</code>, 实现<code>早期的模块化</code></p><p>[es6自带模块化 把这种方式取代了]</p></li></ul></li></ul><h3 id="4-4-闭包的缺点"><a href="#4-4-闭包的缺点" class="headerlink" title="4.4 闭包的缺点"></a>4.4 闭包的缺点</h3><ul><li>形成闭包的变量,不会被内存释放, 不会被js的垃圾回收机制回收, 常驻内存, 过多使用闭包, 造成内存开销过大,甚至内存泄漏.</li></ul><h2 id="5-今日作业"><a href="#5-今日作业" class="headerlink" title="5 今日作业"></a>5 今日作业</h2><ul><li>课堂代码1遍</li><li>箭头函数30个</li><li>课后习题 第 2 题.</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS 高阶02面向过程和对象</title>
      <link href="/2022/01/02/sty02/"/>
      <url>/2022/01/02/sty02/</url>
      
        <content type="html"><![CDATA[<h1 id="JS高级-DAY02"><a href="#JS高级-DAY02" class="headerlink" title="JS高级-DAY02"></a>JS高级-DAY02</h1><h2 id="1-今日目标"><a href="#1-今日目标" class="headerlink" title="1 今日目标"></a>1 今日目标</h2><ul><li><p>面向对象 和 面向过程 [ 了解 ] </p></li><li><p>原型和原型链[重点!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! - 理解清晰 能画图]</p></li><li><p>this的指向[重点!!! - 分析面试题]</p></li></ul><h2 id="2-面向对象和面向过程-了解"><a href="#2-面向对象和面向过程-了解" class="headerlink" title="2 面向对象和面向过程[了解]"></a>2 面向对象和面向过程[了解]</h2><h3 id="2-1-面向对象和面向过程-了解"><a href="#2-1-面向对象和面向过程-了解" class="headerlink" title="2.1 面向对象和面向过程[了解]"></a>2.1 面向对象和面向过程[了解]</h3><ul><li>面向过程(POP):  按照流程, 一步一步的做, 所有步骤亲力亲为, 小兵思维.</li><li>面向对象(OOP):  把功能封装成对象, 要做什么找对象,调用对象的方法, 指挥者的思维, 将军思维</li></ul><h3 id="2-2-类和实例对象"><a href="#2-2-类和实例对象" class="headerlink" title="2.2 类和实例对象"></a>2.2 类和实例对象</h3><ul><li>类(构造函数):  一个大的分类:  人/动物/车/程序员/格子衫      数组  对象  字符串  数字  日期</li><li>实例对象: 一个非常具体的对象:  小貂蝉 18 5224577   川A666 丰田 AE86        [1,2,3] { name: ‘小貂蝉’ }</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> 实例对象 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">类</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// const arr = new Array([1,2,3])  const o = new Object()</span></code></pre><h2 id="3-构造函数-掌握"><a href="#3-构造函数-掌握" class="headerlink" title="3 构造函数[掌握]"></a>3 构造函数[掌握]</h2><ul><li><p>在es5中, js没有类, 所以使用 <code>构造函数代表类</code> </p></li><li><p>JS有内置的构造函数(类)</p><ul><li><p>Object</p></li><li><p>Array</p></li><li><p>Number</p></li><li><p>String</p></li><li><p>Date</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 实例化对象( 使用new 调用构造函数 创建出实例对象 )</span><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>我们可以自己写构造函数( 自己写类 )</p><ul><li>构造函数的特点<ul><li>函数名大写字母开头</li><li>属性和方法都挂在this上</li><li>没有返回值</li><li>使用new调用</li></ul></li></ul><pre class=" language-js"><code class="language-js"># 自己写一个构造函数 <span class="token punctuation">(</span> 除了内置的构造函数之外 我们可以自己写 然后使用 <span class="token keyword">new</span> 来调用 <span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 人类 ( 人的构造函数 )</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 给this添加属性 </span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给this添加方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">'干饭'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 车类 ( 车的构造函数 )</span><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 给this添加属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给this添加方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>startup <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">'启动'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p><code>new的过程</code></p><ul><li>创建一个空对象</li><li>让this指向空对象</li><li>执行构造函数代码</li><li>自动返回this</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 人类 ( 人的构造函数 )</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 给this添加属性 </span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给this添加方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">'干饭'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建实例对象</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'小貂蝉'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">)</span></code></pre></li></ul><h2 id="4-原型Prototype和原型链-重点"><a href="#4-原型Prototype和原型链-重点" class="headerlink" title="4 原型Prototype和原型链[重点]"></a>4 原型Prototype和原型链[重点]</h2><h3 id="4-1-方法过载-了解"><a href="#4-1-方法过载-了解" class="headerlink" title="4.1 方法过载[了解]"></a>4.1 方法过载[了解]</h3><ul><li>new出来的实例对象, 每个实例对象,都有一份自己的方法,称为 <code>方法过载</code>,内存开销过大.</li></ul><h3 id="4-2-原型prototype-重点"><a href="#4-2-原型prototype-重点" class="headerlink" title="4.2 原型prototype[重点]"></a>4.2 原型prototype[重点]</h3><ul><li>[1] 每个函数,特指构造函数,都有一个属性prototype,就是原型( 显式原型 )</li><li>[2] 原型prototype是一个对象, 添加在里面的方法,被所有new出来的实例对象共享.</li><li>[3] 实例对象,都有一个属性<code>__proto__(隐式原型)</code>, 等于自己构造函数的<code>prototype(显式原型)</code> </li><li>[4] 原型prototype里面有一个属性<code>constructor</code>, 指向构造函数本身.</li></ul><h3 id="4-3-原型的作用-重点"><a href="#4-3-原型的作用-重点" class="headerlink" title="4.3 原型的作用[重点]"></a>4.3 原型的作用[重点]</h3><ul><li>添加共享方法.</li></ul><h3 id="4-4-原型链-重点"><a href="#4-4-原型链-重点" class="headerlink" title="4.4 原型链[重点]"></a>4.4 原型链[重点]</h3><ul><li>[5] 原型prototype本身也是一个实例对象, 也有<code>__proto__</code>, 指向自己构造函数Object的<code>prototype</code></li><li>[6] Object的prototype也是实例对象, 也有<code>__proto__</code>, 指向null</li><li>[7] Object的prototype也有属性<code>constructor</code>, 指向构造函数<code>Object</code>本身.</li></ul><h3 id="4-5-原型链的作用"><a href="#4-5-原型链的作用" class="headerlink" title="4.5 原型链的作用"></a>4.5 原型链的作用</h3><ul><li>添加共享方法</li><li>实例对象查找方法,先找自己,自己没有,就沿着原型链往上找,找到就可以调用,直到<code>Object.prototype</code>找不到就报错.</li></ul><h2 id="5-this-重点-分析面试题"><a href="#5-this-重点-分析面试题" class="headerlink" title="5 this[重点 - 分析面试题]"></a>5 this[重点 - 分析面试题]</h2><h3 id="5-1-this的指向"><a href="#5-1-this的指向" class="headerlink" title="5.1 this的指向"></a>5.1 this的指向</h3><ul><li>全局this:     <code>window</code></li><li>函数中的this:  <code>谁调用,指向谁</code></li><li>对象方法中的this:  <code>谁调用,指向谁</code></li><li>构造函数中的this:   <code>实例对象</code></li><li>事件处理函数中的this:  <code>事件源</code></li><li>定时器中的this:  <code>window</code></li><li>箭头函数中的this:  <code>上一级</code> ( 箭头函数没有this, 它的this绑定定义函数时所处的作用域 )</li></ul><h3 id="5-2-3个改变this指向的方法"><a href="#5-2-3个改变this指向的方法" class="headerlink" title="5.2 3个改变this指向的方法"></a>5.2 3个改变this指向的方法</h3><ol><li>伪数组转变成真数组的方法</li></ol><ul><li><p>call() 和 apply()</p><ul><li>区别:  功能一模一样, 唯一的区别是传递参数方式不同.</li></ul><pre class=" language-js"><code class="language-js"># 语法函数<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span>指向<span class="token punctuation">,</span> 实参<span class="token number">1</span><span class="token punctuation">,</span> 实参<span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 调用函数 且 指定this  第一个参数用来改变this指向，不需要形参来接收</span>函数<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span>指向<span class="token punctuation">,</span> <span class="token punctuation">[</span>实参<span class="token number">1</span><span class="token punctuation">,</span> 实参<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调用函数 且 指定this</span>传实际参数的格式不一样哦！</code></pre></li><li><p>bind()</p><ul><li>把函数的this绑定到一个目标对象,然后返回一个新函数, 此后,只要调用新函数, this就固定了,指向之前绑定的目标对象.</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> 新函数 <span class="token operator">=</span> 函数<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span>指向<span class="token punctuation">)</span><span class="token function">新函数</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul><h2 id="6-今日作业"><a href="#6-今日作业" class="headerlink" title="6 今日作业"></a>6 今日作业</h2><ul><li>课堂代码1遍</li><li>手绘原型图5遍 ( 理解清楚关系 )</li><li>手绘原型链图5遍 ( 理解清楚关系 )</li><li>课后作业第3题. [ 画图  - 理解…. ]</li><li>上次作业滴滴扩展题( 画图…..  理解)</li><li>闭包概念4条规则 (1遍)</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JS 高阶03 深浅拷贝</title>
      <link href="/2022/01/02/sty03/"/>
      <url>/2022/01/02/sty03/</url>
      
        <content type="html"><![CDATA[<h1 id="JS-高阶-Day03"><a href="#JS-高阶-Day03" class="headerlink" title="JS 高阶 Day03"></a>JS 高阶 Day03</h1><h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h2><p>闭包是什么：函数 + 函数内部跨坐用域访问的变量</p><h2 id="（一）基本类型-amp-引用类型在内存中存储"><a href="#（一）基本类型-amp-引用类型在内存中存储" class="headerlink" title="（一）基本类型 &amp; 引用类型在内存中存储"></a>（一）基本类型 &amp; 引用类型在内存中存储</h2><ul><li>基本类型（7）：number、string、boolean、undefined、null、Symbol（唯一的值）、BigInt（大整数）</li><li>引用类型（1）：Object（数组、对象、函数、RegExp、Date、Math、Map、WeakMap、Set…）</li></ul><h3 id="内存存储"><a href="#内存存储" class="headerlink" title="内存存储"></a>内存存储</h3><ul><li>所有的基本数据类型，值都存在【栈内存中】</li><li>引用数据类型，数据存在【堆内存】中，地址存在【栈内存】中，通过地址可以找到堆中的数据</li></ul><p>了解：</p><ul><li>栈：容量小，存的位数固定大小，一般是系统自动分配</li><li>堆：容量大，可以灵活扩充，根据程序主动分配的</li></ul><h3 id="变量的拷贝"><a href="#变量的拷贝" class="headerlink" title="变量的拷贝"></a>变量的拷贝</h3><ul><li>对于基本数据类型，拷贝的是值（拷贝以后，互相不影响）</li><li>对于引用数据类型，拷贝的是地址（拷贝后，按相同地址访问的数据，互相影响）</li></ul><h3 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h3><p>函数传参就相当于变量的拷贝（把函数外面的变量拷贝给函数参数）</p><h2 id="（二）对象的深-浅拷贝"><a href="#（二）对象的深-浅拷贝" class="headerlink" title="（二）对象的深/浅拷贝"></a>（二）对象的深/浅拷贝</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    obj<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        a<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            b<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                c<span class="token punctuation">:</span> <span class="token number">1</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>深拷贝：无限层级的拷贝（有多少层拷多少层，永远拷贝的都是值）</li><li>浅拷贝：只考一层，遇到基本数据类型，拷值，遇到引用数据类型，考地址</li></ul><h3 id="4-种拷贝的方式"><a href="#4-种拷贝的方式" class="headerlink" title="4 种拷贝的方式"></a>4 种拷贝的方式</h3><ol><li>for-in 拷贝 1 层，浅拷贝</li><li>Object.assign() 浅拷贝</li><li>JSON 方法，深拷贝，缺陷：不能拷贝对象的方法</li><li>完美深拷贝。Lodash 工具库 _.cloneDeep() 深拷贝，可以拷贝函数</li></ol><p>深拷贝：特点，新旧对象互不影响<br>浅拷贝：特点，拷贝后，基本数据类型的属性，不影响，引用数据类型，因为拷贝的是地址，所以会互相影响</p><h2 id="（三）变量类型检测"><a href="#（三）变量类型检测" class="headerlink" title="（三）变量类型检测"></a>（三）变量类型检测</h2><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>检测基本数据类型准确，特例，<code>typeof null === &#39;object&#39;</code></p><p><code>typeof function() &#123;&#125; === &#39;function&#39;</code></p><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>语法：变量（实例）instanceof 构造函数<br>原理：判断 构造函数的原型 是否在 实例的原型链上</p><h3 id="Array-isArray-静态方法"><a href="#Array-isArray-静态方法" class="headerlink" title="Array.isArray - 静态方法"></a>Array.isArray - 静态方法</h3><p>Object.assign</p><p>专门用来判断数组类型：<code>log(Array.isArray([])); // true</code></p><h3 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call"></a>Object.prototype.toString.call</h3><p>最准确</p><p>Object.prototype.toString.call() 是把数据的类型信息以字符串显示，格式 ‘[object Type]’</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承可以使子类拥有父类的一切特征（属性和方法），并可以在子类上继续重新定义、追加属性和方法。</p><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><p>核心思想：让子类的原型 = 父类的实例，本质上【重写了原型对象】</p><p>问题（缺陷）：如果修改了父类的原型，所有子类实例都受影响，无论是否是新创建</p><p>原因：原型的作用：原型被所有实例所共享</p><h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><p>思想 2 块：</p><ul><li>组合式（重要）<ul><li>对于属性：继承的属性应该挂到子类【实例】上。在子类构造函数中调用父类构造函数，来继承属性</li><li>对于方法：继承的方法应该挂到【原型链】上。通过 Object.create() 构造了原型的指向关系</li></ul></li><li>寄生：通过 Object.create() 避免了 1 次不必要的父类构造函数的调用，直接共享父类原型方法</li></ul><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><ol><li>代码</li><li>选择题</li><li>深拷贝</li><li>面试题</li></ol><h2 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h2><ul><li>《JavaScript 高级程序设计 4版》- 红宝书，不适合从头看到尾，适合当做深入学习某一个模块去学：<a href="https://item.jd.com/12958580.html">https://item.jd.com/12958580.html</a></li><li>《JavaScript 权威指南》犀牛书，和高程类似，买1本就行，犀牛书偏工具书，不太推荐初学的。<a href="https://item.jd.com/10027630697881.html">https://item.jd.com/10027630697881.html</a></li><li>《JavaScript 忍者秘籍》：适合工作以后，对 JS 进行进阶，达到 熟练程度以上。<a href="https://item.jd.com/27788734578.html">https://item.jd.com/27788734578.html</a></li><li>《JavaScript 语言精粹》：胡蝶书。平时适合看得，比较简单，且薄。<a href="https://item.jd.com/12809957.html">https://item.jd.com/12809957.html</a> 适合 JS 进阶</li><li>不推荐：《你不知道的 JavaScript》：黄宝书，语言描述很绕。</li><li>《编写高可维护的 JavaScript》乌龟书：很薄，一下午能看完。工作前看：树立编码规范意识。<a href="https://item.jd.com/11193885.html">https://item.jd.com/11193885.html</a></li></ul><p>如果你以后的工作要深入 CSS：《CSS 揭秘》：<a href="https://item.jd.com/13305034.html">https://item.jd.com/13305034.html</a></p><p>react  《深入 react  技术栈》强推</p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul><li>MDN（找JSAPI）：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign</a></li><li>阮一峰《ES6入门指南》：<a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></li></ul><h3 id="各种方法"><a href="#各种方法" class="headerlink" title="各种方法"></a>各种方法</h3><p>React 关键：</p><ul><li>实例方法：实例对象上的方法（构造函数中 this 上的方法）</li><li>原型方法：原型对象上的方法（构造函数.prototype.方法，可以被所有实例所共享）</li><li>静态方法：构造函数.方法</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到我的博客</title>
      <link href="/2022/01/02/hello-world/"/>
      <url>/2022/01/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
