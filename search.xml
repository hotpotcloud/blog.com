<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>异步同步及框架</title>
      <link href="/2022/01/03/sty05/"/>
      <url>/2022/01/03/sty05/</url>
      
        <content type="html"><![CDATA[<h2 id="异步同步及框架"><a href="#异步同步及框架" class="headerlink" title="异步同步及框架"></a>异步同步及框架</h2><h3 id="同步和异步（理解）"><a href="#同步和异步（理解）" class="headerlink" title="同步和异步（理解）"></a>同步和异步（理解）</h3><ul><li><p>同步</p><p>代码顺序执行，后面的代码等前面的代码执行完再执行</p></li><li><p>异步</p><p>异步代码要等到当前文件中所有同步代码执行完成以后再单独依次执行异步代码</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 同步代码  </span><span class="token comment" spellcheck="true">//console.log(3)要等到循环结束才开始执行</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'循环'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//异步代码</span><span class="token comment" spellcheck="true">// setTimeout中的定时器会等到两个console执行完成以后才执行</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'循环'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p><strong>JS中常见的异步场景</strong></p><p>JS中，我们有很多事情需要异步处理，</p><p>比如：用户执行了表格的刷新，此时没有必要让用户等着，可以先去点别的内容；</p><p>异步就可以帮我们实现这样的场景</p><ul><li><p>定时器</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'就算是定时0，也是异步'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'就算定时0，也是异步'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre></li><li><p>事件处理函数</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我先执行'</span><span class="token punctuation">)</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'绑定事件，需要执行的时候再执行。所以也是异步'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我比事件函数先执行'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 另外送你一个经典示例</span>window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'就算监听页面加载后立刻执行，我还是要等同步代码执行完之后才执行'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre></li><li><p>异步ajax请求</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我先执行'</span><span class="token punctuation">)</span>$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'./xxxUrl'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'得到响应数据后再执行，所以也是异步'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我比ajax的回调先执行'</span><span class="token punctuation">)</span></code></pre></li><li><p>异步回调</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// ajax请求的回调</span>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    url<span class="token punctuation">:</span> <span class="token string">'xxx/api'</span><span class="token punctuation">,</span>    type<span class="token punctuation">:</span><span class="token string">'get'</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ajax请求的回调函数内容'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 事件的回调</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'事件的回调函数内容'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//定时器回调</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'定时器回调内容'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre></li></ul><p><strong>异步代码特点</strong>：==等到所有同步代码执行完成后才开始执行==</p><h3 id="回调地狱（了解）"><a href="#回调地狱（了解）" class="headerlink" title="回调地狱（了解）"></a>回调地狱（了解）</h3><p>我不入地狱，谁入地狱</p><p>回调为我们带来了一种异步解决方案，但是回调的代码结构是交叉的，当回调嵌套较多以后，我们发现代码的文本结构已经变得非常复杂难以维护，下面来体验一下<strong>回调地狱</strong></p><pre class=" language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    url<span class="token punctuation">:</span> <span class="token string">'url1'</span><span class="token punctuation">,</span>    type<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>    success<span class="token punctuation">:</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> data        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 用第一个请求得到的数据，去请求第二个</span>            url<span class="token punctuation">:</span> <span class="token string">'url2'</span><span class="token punctuation">,</span>            type<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            success<span class="token punctuation">:</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">const</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> code <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> data                $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用第二个请求的数据，去请求第三个</span>                    url<span class="token punctuation">:</span> <span class="token string">'url3'</span><span class="token punctuation">,</span>                    type<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>                    data<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> code <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                    success<span class="token punctuation">:</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'终于拿到'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>上面的代码结构缺点：阅读难度极大！</p><h3 id="Promise（重要）"><a href="#Promise（重要）" class="headerlink" title="Promise（重要）"></a>Promise（重要）</h3><p> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise"><code>Promise</code></a> 是一个对象，它代表了一个异步操作的最终完成或者失败。 </p><p> 本质上 Promise 是一个函数返回的对象，我们可以在它上面绑定回调函数，这样我们就不需要在一开始把回调函数作为参数传入这个函数了。 </p><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'返回成功结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'返回失败结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>上面是创建一个promise实例的标准方式</p><p>使用then（后文详解）方法，我们可以得到resolve返回的成功结果</p><h4 id="Promise状态"><a href="#Promise状态" class="headerlink" title="Promise状态"></a>Promise状态</h4><p>​    ==三个状态：==</p><ul><li>​        pending    等待状态</li><li>​         fulfilled    完成状态，成功状态</li><li>​         rejected    拒绝，失败  代表当前promise内部对某些问题的错误处理<ul><li>promise 的状态一旦确定（一旦先调用了res或rej），就不可改变，所以promise的状态流只有两种</li></ul></li></ul><p><strong>promise状态流转有两种：</strong></p><ul><li>pending —&gt; fulfilled（或称resolved）（已成功）</li><li>pending —-&gt; rejected（已失败）</li></ul><p><strong>promise状态有两个特点：</strong></p><ol><li>状态不受外界影响，只由结果决定。</li></ol><ul><li>其实从代码中也能看到，状态完全取决于什么结果去触发resolve方法，什么结果去触发reject方法</li></ul><ol start="2"><li><p>状态不可逆，一旦发生就不再改变，任何时候都可以获得这个结果。</p><ul><li><p>此处可以跟事件监听对比一下，事件监听一旦错过就不能再监听了，比如说：</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'要错过了哟'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 此时页面已经加载完成，再去监听onload事件已经无法执行了</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'页面加载了！'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></code></pre></li></ul></li></ol><h4 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h4><p>基本语法如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'返回成功结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'返回失败结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>分析语法可知：</p><ul><li>使用Promise的方式：new Promise， 初始化一个实例，基于实例去管理异步流程</li><li>Promise类接受一个函数（箭头函数）作为参数，这个函数的两个参数resolve和reject也是两个函数</li><li>resolve函数：当Promise的状态是pending——&gt;已成功（fulfilled），并将操作结果传入到then</li><li>reject函数：当Promise的状态是pending——&gt;已失败（rejected），并将错误传入到catch</li><li>then方法：处理promise结果（成功，也可以接受失败），两个默认参数，都传入回调。第一个函数将resolve返回值作为参数，第二个函数将reject返回的错误作为参数。==但推荐使用catch来接受reject返回的错误==</li><li>catch方法：处理Promise结果（失败），传入一个回调作为参数，将reject返回的错误作为参数</li></ul><p>另外，从语法可以看出，Promise为异步操作提供了一个统一API。（以往事件、异步请求的回调书写方式和位置都不一样，无法统一管理）</p><h4 id="then方法"><a href="#then方法" class="headerlink" title="then方法"></a>then方法</h4><p>语法示例：</p><pre class=" language-javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resolved<span class="token punctuation">,</span>rejected<span class="token punctuation">)</span></code></pre><p>then方法用于处理Promise结果，通过指定回调来获得结果（大部分用于处理成功的结果）。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'返回成功的结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'返回失败的结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>then方法第一个参数是resolved状态的回调函数，参数为resolved状态结果</p><p>then方法第二个参数是rejected状态的回调函数，参数为rejected状态的结果</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'返回成功的结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'返回失败的结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//此处接受rejected状态结果</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>不推荐直接在then方法内处理rejected状态，因为无法捕获同为参数的resolved回调中抛出的错误：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'报错了'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>err<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//此处无法捕获错误</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>then方法返回一个<strong>新的</strong>Promise实例，因此then方法可以接着继续调用then，从而形成链式调用：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'返回成功结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'返回失败结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'链式调用成功'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>then方法中：==回调函数返回值会传入下一个then内，若返回promise实例，则下一个then接收到promise实例状态结果==。</p><p>then回调中返回普通值：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>then回调返回promise实例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'报错了'</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//此处接受前一个then中promise的状态结果</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p><strong>提问：</strong>如果前一个Promise的状态是rejected会怎么样？动手修改一下看看</p><p>基于then的特性，我们可以非常方便的管理一些复杂的异步过程，比如，三个不同的定时器执行过程需要管理：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 三个不同的定时器，我希望能按照我想要的顺序去执行</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>上面的代码比较繁琐，可以将包含定时器的promise抽象（封装）成一个函数，让代码更简洁，抽象（封装）的原则是：将相同过程封装进函数，不同的地方作为参数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 将过程封装</span><span class="token comment" spellcheck="true">// 需要传递的数据用resolve传递</span><span class="token keyword">function</span> <span class="token function">dealTimer</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>sec<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>sec<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用函数</span><span class="token function">dealTimer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">dealTimer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">dealTimer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>基于上面的过程，可以将前面ajax的回调地狱也封装优化出来：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 封装请求数据的逻辑</span><span class="token keyword">const</span> getData <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            url<span class="token punctuation">,</span>            type<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> params<span class="token punctuation">,</span>            success<span class="token punctuation">:</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 请求成功后把数据传递给下一个 .then()</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'url1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'url2'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id<span class="token punctuation">:</span> data<span class="token punctuation">.</span>id <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'url3'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> code<span class="token punctuation">:</span> data<span class="token punctuation">.</span>code <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'终于拿到'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h4 id="async-—video12"><a href="#async-—video12" class="headerlink" title="async   —video12"></a>async   —video12</h4><ul><li><p>概念：</p><ul><li>用于修饰函数</li><li>async修饰的函数调用后返回一个promise实例</li><li>async修饰的函数内 return数据的情况和then回调内return的体现一致</li></ul></li><li><p>语法：async 函数体</p></li><li><p>语义：告知当前函数体内有异步操作</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">dosth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//函数天生带有返回值，如果没有显式return，则返回undefined</span>            <span class="token comment" spellcheck="true">// return 1   //此处return的数据会作为返回的pormise成功的结果值</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>rej<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">dosth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul><h4 id="await"><a href="#await" class="headerlink" title="await"></a>await</h4><ul><li>概念：用于修饰promise，且await必须在async修饰的函数内使用</li><li>作用：<ul><li>修饰promise时，后续同步代码要等到当前promise状态确定后才能执行</li><li>可以获得promise的成功结果值</li></ul></li></ul><h4 id="async和await的正确使用姿势"><a href="#async和await的正确使用姿势" class="headerlink" title="async和await的正确使用姿势"></a>async和await的正确使用姿势</h4><ol><li>try{…}.catch</li></ol><h4 id="catch方法"><a href="#catch方法" class="headerlink" title="catch方法"></a>catch方法</h4><p>语法示例：</p><pre class=" language-javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>rejected<span class="token punctuation">)</span></code></pre><p>catch方法和then方法一样，参数为函数（回调）。</p><p>catch方法的作用：==指定发生错误时的回调函数，回调函数的参数为【异步执行过程中】抛出来的错误信息==</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Promise本身reject</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 执行过程中的报错（比如then内部抛错）</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'成功结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'失败结果'</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>aaa <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//因为aaa不存在，所以此处的报错信息会被catch捕获到</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>另外，catch也返回一个新的promise，所以也能进行链式调用，比如前面的ajax请求封装，就可以结合catch来操作，如果过程中有报错就能阻止继续请求下去：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 封装请求数据的逻辑</span><span class="token keyword">const</span> getData <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> params <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            url<span class="token punctuation">,</span>            type<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> params<span class="token punctuation">,</span>            success<span class="token punctuation">:</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 请求成功后把数据传递给下一个 .then()</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            error<span class="token punctuation">:</span><span class="token punctuation">(</span>XMLHttpRequert<span class="token punctuation">,</span>textStatus<span class="token punctuation">,</span>errorThrown<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token function">reject</span><span class="token punctuation">(</span>errorThrown<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加catch捕获错误，这样当其中一个请求发生错误就可以阻止后续的请求进行</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'url1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'url2'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id<span class="token punctuation">:</span> data<span class="token punctuation">.</span>id <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">'url3'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> code<span class="token punctuation">:</span> data<span class="token punctuation">.</span>code <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'终于拿到'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h4 id="finally方法（熟悉）"><a href="#finally方法（熟悉）" class="headerlink" title="finally方法（熟悉）"></a>finally方法（熟悉）</h4><p>语法示例：</p><pre class=" language-javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">(</span><span class="token punctuation">)</span> </code></pre><p>finally方法的作用：==指定不论Promise结果状态如何，都会执行该方法内部的回调，且该方法的回调不接受任何参数==，这代表finally的执行与状态无关，不依赖Promise的结果</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'最终执行finally'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h4 id="all方法"><a href="#all方法" class="headerlink" title="all方法"></a>all方法</h4><p>语法示例：</p><pre class=" language-javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>由语法可以看出，all方法是Promise类的静态方法</p><p>all方法的作用：==将多个Promise实例包装成一个新的Promise实例，接受一个数组（也可以是 Iterator 数据结构）==，用于批量处理多个Promise实例。</p><ul><li>当所有Promise都fulfilled，则all执行结束状态也是fulfilled，此时所有Promise的成功结果组成数组传递到all执行结束后的then指定的回调</li><li>当其中某个Promise状态为rejected，则将这个Promise的rejected结果传递到all执行结束后的catch指定的回调</li><li>在不关心异步执行顺序和结果时，使用all方法集中管理Promise不失为一个办法</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'p1执行了'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'p2执行了'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//reject('失败了')</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'p3执行了'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// p1,p2,p3全部执行完以后，将成功结果组合为一个数组，传入p的then中</span><span class="token comment" spellcheck="true">// p1,p2,p3其中某一个失败，则停止执行直接将失败结果传入p的catch中</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="race方法"><a href="#race方法" class="headerlink" title="race方法"></a>race方法</h4><p>语法示例：</p><pre class=" language-javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>由语法可以看出，race是Promise的静态方法</p><p>race方法的作用：==在管理多个Promise时，获得最先传递的结果==</p><p>和all一样，race也接受多个Promise组成的数组（也可以是 Iterator 数据结构），但race不会等待所有异步执行完毕，而是拿到最先发生状态改变的Promise的结果就不再接受后续Promise实例的结果值了。</p><p>比如：有时候你希望给某个ajax请求设置超时。</p><p>模拟代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'p1执行了'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'p2执行了'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'p3执行了'</span><span class="token punctuation">)</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// p1,p2,p3其中某一个率先完成，将结果传入p的then或者catch</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>但是运行上面的代码我们发现这个方法也有点鸡肋，因为这样的超时设置很明显并不合理，如果你设置了两秒超时，但两秒后服务器返回数据了咋弄呢？所以一般都是后端设置超时，通过抛错的方式告知前端</p><h4 id="Promise总结"><a href="#Promise总结" class="headerlink" title="Promise总结"></a>Promise总结</h4><p><strong>Promise的含义</strong>：</p><ul><li>管理异步操作（队列化异步操作）</li><li>用同步的方式编写异步代码</li></ul><p><strong>Promise理解知识点</strong>：</p><ul><li>Promise是一个构造函数，使用new Promise构建一个Promise实例</li><li>Promise有三种状态：进行中（pending）、已成功（fulfilled）、已失败（rejected）<ul><li>结果决定状态，不受其他因素影响</li><li>状态不可逆，一旦发生，不再改变，且任何时候使用回调都可以得到最后结果（注意区别于事件监听）</li></ul></li><li>Promise队列中保存成功或失败时的回调</li><li>原型方法：.then, .catch, .finally</li><li>静态方法：.all，.race</li><li>promise对异步的管理，为我们提供了统一的API规范来书写异步过程，并且让【代码结构】趋于同步</li></ul><h3 id="axios库（重要）"><a href="#axios库（重要）" class="headerlink" title="axios库（重要）"></a>axios库（重要）</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>之前我们学习了jQuery库，它为我们在操作DOM、css、事件等方面提供了极大地遍历，但jQuery对ajax的封装还是显得落后一些（带来回调地狱），所以更推荐使用axios</p><p>axios的定位：面向浏览器和node.js的基于Promise的HTTP请求库</p><p>由于axios基于Promise，我们的ajax请求代码可以变得更优雅，且可以做更细致的控制</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>中文文档地址： <a href="http://www.axios-js.com/">http://www.axios-js.com/</a> </p><p><strong>不会看文档的程序猿不是好程序猿</strong></p><p>使用axios发送一个post请求：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    method<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>    url<span class="token punctuation">:</span> <span class="token string">'/user/12345'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        name<span class="token punctuation">:</span> <span class="token string">'源宝'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 请求成功</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 请求失败或出错</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>不论是代码结构还是结果获取，axios的表现都要优于jQuery。</p><p>另外，axios还提供了单独的get和post方法，让我们更专注请求配置，且url和data分离，让代码结构更美观</p><pre class=" language-javascript"><code class="language-javascript">axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'url1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'url2'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    params<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> id<span class="token punctuation">:</span> data<span class="token punctuation">.</span>id <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'url3'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    params<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> code<span class="token punctuation">:</span> data<span class="token punctuation">.</span>code <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'终于拿到'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>其实从axios的代码结构可以看出，这和我们前面实现的getData很类似，并且更简洁优雅。</p><p>axios还提供了很多其他方法的API，大家参考文档学习掌握</p><h3 id="async和await（重要）"><a href="#async和await（重要）" class="headerlink" title="async和await（重要）"></a>async和await（重要）</h3><p>async翻译为：异步</p><p>await翻译为：等待</p><p>async和await是ES7（ES2017）中提供的新特性，用于进一步完善异步代码的操作。</p><p>关于async和await有几点需要记住：</p><ul><li>async修饰函数，<strong>表明当前函数内有异步操作</strong>，被async修饰的函数称为——async函数</li><li>await<strong>只能在async内使用</strong>，<strong>用于修饰promise</strong>，后面的代码需要等待promise执行结束才执行<ul><li>await也可以修饰基本数据（数字、字符串等等），但被修饰的数据会立刻转换成立即resolved的promise</li></ul></li><li>async函数<strong>返回promise</strong></li></ul><h4 id="async"><a href="#async" class="headerlink" title="async"></a>async</h4><p>async表示函数内有异步操作，其本质是一个语法糖（封装语法），async修饰的函数返回一个promise</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// async修饰一个函数</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 上面的代码等价于</span><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="await-1"><a href="#await-1" class="headerlink" title="await"></a>await</h4><p>await只能在async内使用，用于修饰promise和其他类型（会被转成promise），其作用是使后续代码等待当前promise执行结束</p><p>当我们希望某两个定时器能按照代码先后顺序执行的话就可以使用async和await来实现</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 使用async和await修饰</span>    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async_p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> p1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> p2<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">async_p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="event-loop事件队列（拓展面试题）"><a href="#event-loop事件队列（拓展面试题）" class="headerlink" title="event-loop事件队列（拓展面试题）"></a>event-loop事件队列（拓展面试题）</h4><p>js是一门事件驱动的语言，这里的事件不仅仅包括我们平时理解的click、mouseover等等，还有定时器、promise等；js的代码依靠这些事件来实现异步，那么这些代码是如何执行的呢？</p><p>请注意：event-loop原理，<strong>高端团队面试必问！</strong></p><p>==JS代码在执行之前要将全部代码【<strong>编译</strong>】一次，这其中包括变量提升、任务队列推送等等，当一切准备好以后，就可以开始执行代码了==</p><p><strong>JS事件队列</strong>：</p><ul><li>JS任务分为<strong>同步任务队列</strong>和<strong>异步任务队列</strong><ul><li>异步任务队列又分为：<strong>宏任务</strong>和<strong>微任务</strong></li></ul></li><li>代码执行时，将<strong>同步代码推送到同步任务队列</strong>依次执行；将<strong>异步代码推送到异步任务队列准备起来</strong></li><li>当<strong>同步任务</strong>执行<strong>完成</strong>后，再<strong>将异步队列中的任务推送到同步队列中依次执行</strong></li></ul><p><strong>JS异步队列：</strong></p><ul><li>宏任务——setTimeout、setInterval等<ul><li>当遇到宏任务的时候推送到宏任务队列</li></ul></li><li>微任务——promise.then<ul><li>当遇到微任务的时候会将微任务推送到微任务队列</li></ul></li></ul><p><strong>JS队列执行顺序：</strong></p><ul><li>先执行同步任务</li><li>同步任务结束后，执行一次微任务（将微任务队列清空）</li><li>然后依次执行宏任务，每执行一次宏任务再去微任务队列查看是否有新的微任务，有就清空</li></ul><p>安装：</p><p>   npm i @vue/cli -g</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 高阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS高阶04 智库</title>
      <link href="/2022/01/02/sty04/"/>
      <url>/2022/01/02/sty04/</url>
      
        <content type="html"><![CDATA[<h1 id="课堂知识点智库"><a href="#课堂知识点智库" class="headerlink" title="课堂知识点智库"></a>课堂知识点智库</h1><h2 id="一、高阶"><a href="#一、高阶" class="headerlink" title="一、高阶"></a>一、高阶</h2><h3 id="01-Function-prototype-toString的作用"><a href="#01-Function-prototype-toString的作用" class="headerlink" title="01.Function.prototype.toString的作用"></a>01.Function.prototype.toString的作用</h3><p>返回当前函数代码体的字符串</p><h3 id="02-Function基类的作用"><a href="#02-Function基类的作用" class="headerlink" title="02. Function基类的作用"></a>02. Function基类的作用</h3><p>new Function([arg1,arg2…],functionBody)可以创建一个function函数，且设置参数</p><h3 id="03-JavaScript和ECMAscript的关系？"><a href="#03-JavaScript和ECMAscript的关系？" class="headerlink" title="03. JavaScript和ECMAscript的关系？"></a>03. JavaScript和ECMAscript的关系？</h3><p>JavaScript是语言<br>ECMAscript是规范</p><h3 id="04-javascript中对象被销毁的标致是什么？"><a href="#04-javascript中对象被销毁的标致是什么？" class="headerlink" title="04.javascript中对象被销毁的标致是什么？"></a>04.javascript中对象被销毁的标致是什么？</h3><p>当对象不再引用的时候，就被销毁了，比如a={name:‘张三’},如果为a赋值为null，则{name：‘张三’}就被销毁了</p><h3 id="05-ES6解构赋值的核心是什么？"><a href="#05-ES6解构赋值的核心是什么？" class="headerlink" title="05.ES6解构赋值的核心是什么？"></a>05.ES6解构赋值的核心是什么？</h3><p>变量所处结构目标数据结构一模一样<br>数组解构小细节：<br>跳过成员解构，使用空白加逗号</p><h3 id="06-扩展运算符特性"><a href="#06-扩展运算符特性" class="headerlink" title="06.扩展运算符特性"></a>06.扩展运算符特性</h3><p>1.可以展开字符串<br>2.可以展开数组<br>3.可以展开对象<br>(1)必须在一个对象内展开另一个对象</p><h3 id="07-Object-assign的作用"><a href="#07-Object-assign的作用" class="headerlink" title="07.Object.assign的作用"></a>07.Object.assign的作用</h3><p>1.语法：Object.assign(target,source1,source2…)<br>2.定义：将所有可枚举属性从一个或多个源对象身上分配给目标对象，且返回目标对象本身！</p><h3 id="08-class类中原型方法的内部this有什么特点？"><a href="#08-class类中原型方法的内部this有什么特点？" class="headerlink" title="08. class类中原型方法的内部this有什么特点？"></a>08. class类中原型方法的内部this有什么特点？</h3><p>3.Class类原型方法在调用的时候必须显式指明this指向，否则内部this为undefined</p><h3 id="09-Object-create的作用是什么？"><a href="#09-Object-create的作用是什么？" class="headerlink" title="09. Object.create的作用是什么？"></a>09. Object.create的作用是什么？</h3><p>1.语法：Object.create(protoObj)<br>2.概念：<br>(1)创建一个对象<br>(2)将参数中的对象设置为创建出来的对象的原型</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 高阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 高阶01 闭包</title>
      <link href="/2022/01/02/sty01/"/>
      <url>/2022/01/02/sty01/</url>
      
        <content type="html"><![CDATA[<h1 id="JS高级-DAY01"><a href="#JS高级-DAY01" class="headerlink" title="JS高级-DAY01"></a>JS高级-DAY01</h1><h2 id="1-今日目标"><a href="#1-今日目标" class="headerlink" title="1 今日目标"></a>1 今日目标</h2><ul><li>执行环境和作用域 [ 理解  - 5%]</li><li>函数进阶 [重点 - 使用熟练 - 45%]</li><li>闭包[重点 - 理解清晰 - 50%]</li></ul><h2 id="2-执行环境和变量对象和作用域-理解"><a href="#2-执行环境和变量对象和作用域-理解" class="headerlink" title="2 执行环境和变量对象和作用域 [ 理解 ]"></a>2 <code>执行环境</code>和<code>变量对象</code>和<code>作用域</code> [ 理解 ]</h2><h3 id="2-1-执行环境-了解"><a href="#2-1-执行环境-了解" class="headerlink" title="2.1 执行环境 [ 了解 ]"></a>2.1 执行环境 [ 了解 ]</h3><ul><li>人类生活的环境是: <code>地球</code>, 我们学习的环境是: <code>教室</code>, 那么, 代码执行,也有自己的一个环境, 就是: <code>执行环境</code></li><li>JS中的代码执行,有 2 种<code>执行环境</code><ul><li><code>全局执行环境</code> ( 默认 )</li><li><code>函数执行环境</code> ( 调用函数的时候, 就会创建函数的执行环境. )</li></ul></li><li>js的执行环境,会被放入一个栈中, 默认栈中放的是<code>全局执行环境</code>, 当有函数调用, 就会创建函数的执行环境,且把这个执行环境推入栈中.   ( 栈:  执行环境栈 或  调用栈 )</li></ul><h3 id="2-2-变量对象-了解"><a href="#2-2-变量对象-了解" class="headerlink" title="2.2 变量对象[了解]"></a>2.2 变量对象[了解]</h3><ul><li><p>每个执行环境,都会关联一个看不见的 <code>变量对象</code></p></li><li><p>变量对象,存着这个执行环境中的所有<code>标识符</code></p></li><li><p><code>标识符</code>:  变量名 / 函数名 / 形参 / 对象的键名</p></li><li><p>当执行环境销毁, 关联的变量对象也会把所有标识符销毁.</p></li></ul><h3 id="2-3-作用域-掌握"><a href="#2-3-作用域-掌握" class="headerlink" title="2.3 作用域 [掌握]"></a>2.3 作用域 [掌握]</h3><h4 id="2-3-1-概念"><a href="#2-3-1-概念" class="headerlink" title="2.3.1 概念"></a>2.3.1 概念</h4><p><code>标识符</code>可以使用的范围   [ 自己作用域和子作用域 ]</p><h4 id="2-3-2-作用域链"><a href="#2-3-2-作用域链" class="headerlink" title="2.3.2 作用域链"></a>2.3.2 作用域链</h4><p>提供了一套规则, 从里往外查找标识符, 找到就可以使用,找不到就报错.</p><p>正是有了作用域链的查找规则, 所有就有了作用域.</p><h4 id="2-3-3-作用域分类"><a href="#2-3-3-作用域分类" class="headerlink" title="2.3.3 作用域分类"></a>2.3.3 作用域分类</h4><ul><li>全局</li><li>局部(函数)</li><li>块级  [ ES6才有的块级 ]</li></ul><h2 id="3-函数进阶-重点-熟练使用"><a href="#3-函数进阶-重点-熟练使用" class="headerlink" title="3 函数进阶[重点 - 熟练使用]"></a>3 函数进阶[重点 - 熟练使用]</h2><h3 id="3-1-函数的写法-重点"><a href="#3-1-函数的写法-重点" class="headerlink" title="3.1 函数的写法 [重点]"></a>3.1 函数的写法 [重点]</h3><ul><li><p>声明式写法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>形参<span class="token number">1</span><span class="token punctuation">,</span> 形参<span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 代码 */</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>表达式写法</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> 变量 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>形参<span class="token number">1</span><span class="token punctuation">,</span> 形参<span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 代码 */</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>箭头函数 [ 30个箭头函数 ]</p><ul><li>形参有且只有1个,<code>可省略</code>()    [ 也可以不省略 ]</li><li>代码只有1局,<code>可省略</code>{}, 且必须省略return, 会自动return    [ 也可以不省略 ]</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> 变量 <span class="token operator">=</span> <span class="token punctuation">(</span>形参<span class="token number">1</span><span class="token punctuation">,</span> 形参<span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 代码 */</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="3-2-函数的参数-重点"><a href="#3-2-函数的参数-重点" class="headerlink" title="3.2 函数的参数[重点]"></a>3.2 函数的参数[重点]</h3><ul><li><p>实参和形参[重点]</p><ul><li>形参:  占位使用, 要语义化. 叫啥都行.</li><li>实参:   调用函数,实际传入的参数, 传啥都行, <code>实参</code>传递什么给形参, <code>形参</code>就是你传入的东西.</li></ul></li><li><p>默认参数[重点]</p><ul><li><p>es5</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>形参<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> 变量 <span class="token operator">=</span> 形参 <span class="token operator">||</span> 默认值<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>es6</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>形参 <span class="token operator">=</span> 默认值<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ul></li><li><p>arguments[了解]</p><ul><li>在函数内部可以直接获取到, 获取到所有实参, 结果是:<code>伪数组</code>.</li><li>作用:  不能确定参数个数的情况</li></ul></li><li><p>rest剩余参数 [重点]</p><ul><li><p>es6推出的, 叫: 剩余参数. 用来取代arguments.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>形参<span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>形参<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 形参1: 得到实参1</span>    <span class="token comment" spellcheck="true">// 形参: 得到 [实参2, 实参3, 实参4]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">函数名</span><span class="token punctuation">(</span>实参<span class="token number">1</span><span class="token punctuation">,</span> 实参<span class="token number">2</span><span class="token punctuation">,</span> 实参<span class="token number">3</span><span class="token punctuation">,</span> 实参<span class="token number">4</span><span class="token punctuation">)</span></code></pre></li></ul></li></ul><h3 id="3-3-函数的返回值-重点"><a href="#3-3-函数的返回值-重点" class="headerlink" title="3.3 函数的返回值[重点]"></a>3.3 函数的返回值[重点]</h3><ul><li><p>函数没有return, 默认<code>return undefined</code></p></li><li><p>函数返回啥,就得到啥.</p></li><li><p>哪里调用函数, 函数的返回值,就返回到那里去.</p></li><li><p>函数都要return吗?</p><ul><li><p>如果调用一个函数, 只是让它干一件事, 干就完了, 不要结果, 就不需要return</p><ul><li><p>渲染函数.</p></li><li><p>弹窗函数</p></li></ul></li><li><p>如果调用一个函数, 需要它把结果汇报给你, 要使用变量接收这个结果, 把结果用在别的地方.</p><ul><li>求和</li><li>获取年月日</li></ul></li></ul></li></ul><h3 id="3-4-函数的调用-重点"><a href="#3-4-函数的调用-重点" class="headerlink" title="3.4 函数的调用[重点]"></a>3.4 函数的调用[重点]</h3><ul><li><p>直接调用    -  直调 [重点]</p><pre class=" language-js"><code class="language-js"><span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>对象调用方法  -  对调 [重点]</p><pre class=" language-js"><code class="language-js">对象<span class="token punctuation">.</span><span class="token function">方法</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>回调函数:  当满足一定条件,自动调用执行 -  回调 [重点]</p><pre class=" language-js"><code class="language-js"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>dom<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre></li><li><p>IIFE立即执行函数表达式 - 自调 [理解]</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'666'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul><h2 id="4-闭包-重点-理解清晰"><a href="#4-闭包-重点-理解清晰" class="headerlink" title="4 闭包[重点 - 理解清晰]"></a>4 闭包[重点 - 理解清晰]</h2><h3 id="4-1-闭包的概念"><a href="#4-1-闭包的概念" class="headerlink" title="4.1 闭包的概念"></a>4.1 闭包的概念</h3><ul><li><p>函数跨作用域访问变量,形成闭包. 闭包是一种作用域的体现. 一般把: <code>函数</code> 和 <code>变量</code> 的总和,称为闭包.</p><pre class=" language-js"><code class="language-js">闭包 <span class="token operator">=</span> spendMoney <span class="token operator">+</span> money</code></pre></li></ul><h3 id="4-2-闭包的标准写法"><a href="#4-2-闭包的标准写法" class="headerlink" title="4.2 闭包的标准写法"></a>4.2 闭包的标准写法</h3><ul><li><p>闭包的写法是:  父函数嵌套子函数, 子函数访问父函数的变量,把子函数返回或挂在全局.</p><ul><li><p>写法一:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> 变量 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">父函数</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> 变量    <span class="token keyword">function</span> <span class="token function">子函数</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>变量<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> 子函数<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>写法二:</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">父函数</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> 变量    <span class="token keyword">function</span> <span class="token function">子函数</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>变量<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    window<span class="token punctuation">.</span>属性名  <span class="token operator">=</span> 子函数<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li></ul><h3 id="4-3-闭包的作用"><a href="#4-3-闭包的作用" class="headerlink" title="4.3 闭包的作用"></a>4.3 闭包的作用</h3><ul><li><p>核心作用:</p><ul><li><p>闭包: 把变量封闭包裹在一个匿名函数内部, <code>隐藏变量或私有化变量</code>, 实现<code>早期的模块化</code></p><p>[es6自带模块化 把这种方式取代了]</p></li></ul></li></ul><h3 id="4-4-闭包的缺点"><a href="#4-4-闭包的缺点" class="headerlink" title="4.4 闭包的缺点"></a>4.4 闭包的缺点</h3><ul><li>形成闭包的变量,不会被内存释放, 不会被js的垃圾回收机制回收, 常驻内存, 过多使用闭包, 造成内存开销过大,甚至内存泄漏.</li></ul><h2 id="5-今日作业"><a href="#5-今日作业" class="headerlink" title="5 今日作业"></a>5 今日作业</h2><ul><li>课堂代码1遍</li><li>箭头函数30个</li><li>课后习题 第 2 题.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 高阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 高阶02面向过程和对象</title>
      <link href="/2022/01/02/sty02/"/>
      <url>/2022/01/02/sty02/</url>
      
        <content type="html"><![CDATA[<h1 id="JS高级-DAY02"><a href="#JS高级-DAY02" class="headerlink" title="JS高级-DAY02"></a>JS高级-DAY02</h1><h2 id="1-今日目标"><a href="#1-今日目标" class="headerlink" title="1 今日目标"></a>1 今日目标</h2><ul><li><p>面向对象 和 面向过程 [ 了解 ] </p></li><li><p>原型和原型链[重点!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! - 理解清晰 能画图]</p></li><li><p>this的指向[重点!!! - 分析面试题]</p></li></ul><h2 id="2-面向对象和面向过程-了解"><a href="#2-面向对象和面向过程-了解" class="headerlink" title="2 面向对象和面向过程[了解]"></a>2 面向对象和面向过程[了解]</h2><h3 id="2-1-面向对象和面向过程-了解"><a href="#2-1-面向对象和面向过程-了解" class="headerlink" title="2.1 面向对象和面向过程[了解]"></a>2.1 面向对象和面向过程[了解]</h3><ul><li>面向过程(POP):  按照流程, 一步一步的做, 所有步骤亲力亲为, 小兵思维.</li><li>面向对象(OOP):  把功能封装成对象, 要做什么找对象,调用对象的方法, 指挥者的思维, 将军思维</li></ul><h3 id="2-2-类和实例对象"><a href="#2-2-类和实例对象" class="headerlink" title="2.2 类和实例对象"></a>2.2 类和实例对象</h3><ul><li>类(构造函数):  一个大的分类:  人/动物/车/程序员/格子衫      数组  对象  字符串  数字  日期</li><li>实例对象: 一个非常具体的对象:  小貂蝉 18 5224577   川A666 丰田 AE86        [1,2,3] { name: ‘小貂蝉’ }</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> 实例对象 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">类</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// const arr = new Array([1,2,3])  const o = new Object()</span></code></pre><h2 id="3-构造函数-掌握"><a href="#3-构造函数-掌握" class="headerlink" title="3 构造函数[掌握]"></a>3 构造函数[掌握]</h2><ul><li><p>在es5中, js没有类, 所以使用 <code>构造函数代表类</code> </p></li><li><p>JS有内置的构造函数(类)</p><ul><li><p>Object</p></li><li><p>Array</p></li><li><p>Number</p></li><li><p>String</p></li><li><p>Date</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 实例化对象( 使用new 调用构造函数 创建出实例对象 )</span><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>我们可以自己写构造函数( 自己写类 )</p><ul><li>构造函数的特点<ul><li>函数名大写字母开头</li><li>属性和方法都挂在this上</li><li>没有返回值</li><li>使用new调用</li></ul></li></ul><pre class=" language-js"><code class="language-js"># 自己写一个构造函数 <span class="token punctuation">(</span> 除了内置的构造函数之外 我们可以自己写 然后使用 <span class="token keyword">new</span> 来调用 <span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 人类 ( 人的构造函数 )</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 给this添加属性 </span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给this添加方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">'干饭'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 车类 ( 车的构造函数 )</span><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 给this添加属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给this添加方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>startup <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">'启动'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p><code>new的过程</code></p><ul><li>创建一个空对象</li><li>让this指向空对象</li><li>执行构造函数代码</li><li>自动返回this</li></ul><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 人类 ( 人的构造函数 )</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 给this添加属性 </span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 给this添加方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>eat <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">'干饭'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建实例对象</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'小貂蝉'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">)</span></code></pre></li></ul><h2 id="4-原型Prototype和原型链-重点"><a href="#4-原型Prototype和原型链-重点" class="headerlink" title="4 原型Prototype和原型链[重点]"></a>4 原型Prototype和原型链[重点]</h2><h3 id="4-1-方法过载-了解"><a href="#4-1-方法过载-了解" class="headerlink" title="4.1 方法过载[了解]"></a>4.1 方法过载[了解]</h3><ul><li>new出来的实例对象, 每个实例对象,都有一份自己的方法,称为 <code>方法过载</code>,内存开销过大.</li></ul><h3 id="4-2-原型prototype-重点"><a href="#4-2-原型prototype-重点" class="headerlink" title="4.2 原型prototype[重点]"></a>4.2 原型prototype[重点]</h3><ul><li>[1] 每个函数,特指构造函数,都有一个属性prototype,就是原型( 显式原型 )</li><li>[2] 原型prototype是一个对象, 添加在里面的方法,被所有new出来的实例对象共享.</li><li>[3] 实例对象,都有一个属性<code>__proto__(隐式原型)</code>, 等于自己构造函数的<code>prototype(显式原型)</code> </li><li>[4] 原型prototype里面有一个属性<code>constructor</code>, 指向构造函数本身.</li></ul><h3 id="4-3-原型的作用-重点"><a href="#4-3-原型的作用-重点" class="headerlink" title="4.3 原型的作用[重点]"></a>4.3 原型的作用[重点]</h3><ul><li>添加共享方法.</li></ul><h3 id="4-4-原型链-重点"><a href="#4-4-原型链-重点" class="headerlink" title="4.4 原型链[重点]"></a>4.4 原型链[重点]</h3><ul><li>[5] 原型prototype本身也是一个实例对象, 也有<code>__proto__</code>, 指向自己构造函数Object的<code>prototype</code></li><li>[6] Object的prototype也是实例对象, 也有<code>__proto__</code>, 指向null</li><li>[7] Object的prototype也有属性<code>constructor</code>, 指向构造函数<code>Object</code>本身.</li></ul><h3 id="4-5-原型链的作用"><a href="#4-5-原型链的作用" class="headerlink" title="4.5 原型链的作用"></a>4.5 原型链的作用</h3><ul><li>添加共享方法</li><li>实例对象查找方法,先找自己,自己没有,就沿着原型链往上找,找到就可以调用,直到<code>Object.prototype</code>找不到就报错.</li></ul><h2 id="5-this-重点-分析面试题"><a href="#5-this-重点-分析面试题" class="headerlink" title="5 this[重点 - 分析面试题]"></a>5 this[重点 - 分析面试题]</h2><h3 id="5-1-this的指向"><a href="#5-1-this的指向" class="headerlink" title="5.1 this的指向"></a>5.1 this的指向</h3><ul><li>全局this:     <code>window</code></li><li>函数中的this:  <code>谁调用,指向谁</code></li><li>对象方法中的this:  <code>谁调用,指向谁</code></li><li>构造函数中的this:   <code>实例对象</code></li><li>事件处理函数中的this:  <code>事件源</code></li><li>定时器中的this:  <code>window</code></li><li>箭头函数中的this:  <code>上一级</code> ( 箭头函数没有this, 它的this绑定定义函数时所处的作用域 )</li></ul><h3 id="5-2-3个改变this指向的方法"><a href="#5-2-3个改变this指向的方法" class="headerlink" title="5.2 3个改变this指向的方法"></a>5.2 3个改变this指向的方法</h3><ol><li>伪数组转变成真数组的方法</li></ol><ul><li><p>call() 和 apply()</p><ul><li>区别:  功能一模一样, 唯一的区别是传递参数方式不同.</li></ul><pre class=" language-js"><code class="language-js"># 语法函数<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span>指向<span class="token punctuation">,</span> 实参<span class="token number">1</span><span class="token punctuation">,</span> 实参<span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 调用函数 且 指定this  第一个参数用来改变this指向，不需要形参来接收</span>函数<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span>指向<span class="token punctuation">,</span> <span class="token punctuation">[</span>实参<span class="token number">1</span><span class="token punctuation">,</span> 实参<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调用函数 且 指定this</span>传实际参数的格式不一样哦！</code></pre></li><li><p>bind()</p><ul><li>把函数的this绑定到一个目标对象,然后返回一个新函数, 此后,只要调用新函数, this就固定了,指向之前绑定的目标对象.</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> 新函数 <span class="token operator">=</span> 函数<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span>指向<span class="token punctuation">)</span><span class="token function">新函数</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul><h2 id="6-今日作业"><a href="#6-今日作业" class="headerlink" title="6 今日作业"></a>6 今日作业</h2><ul><li>课堂代码1遍</li><li>手绘原型图5遍 ( 理解清楚关系 )</li><li>手绘原型链图5遍 ( 理解清楚关系 )</li><li>课后作业第3题. [ 画图  - 理解…. ]</li><li>上次作业滴滴扩展题( 画图…..  理解)</li><li>闭包概念4条规则 (1遍)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 高阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 高阶03 深浅拷贝</title>
      <link href="/2022/01/02/sty03/"/>
      <url>/2022/01/02/sty03/</url>
      
        <content type="html"><![CDATA[<h1 id="JS-高阶-Day03"><a href="#JS-高阶-Day03" class="headerlink" title="JS 高阶 Day03"></a>JS 高阶 Day03</h1><h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h2><p>闭包是什么：函数 + 函数内部跨坐用域访问的变量</p><h2 id="（一）基本类型-amp-引用类型在内存中存储"><a href="#（一）基本类型-amp-引用类型在内存中存储" class="headerlink" title="（一）基本类型 &amp; 引用类型在内存中存储"></a>（一）基本类型 &amp; 引用类型在内存中存储</h2><ul><li>基本类型（7）：number、string、boolean、undefined、null、Symbol（唯一的值）、BigInt（大整数）</li><li>引用类型（1）：Object（数组、对象、函数、RegExp、Date、Math、Map、WeakMap、Set…）</li></ul><h3 id="内存存储"><a href="#内存存储" class="headerlink" title="内存存储"></a>内存存储</h3><ul><li>所有的基本数据类型，值都存在【栈内存中】</li><li>引用数据类型，数据存在【堆内存】中，地址存在【栈内存】中，通过地址可以找到堆中的数据</li></ul><p>了解：</p><ul><li>栈：容量小，存的位数固定大小，一般是系统自动分配</li><li>堆：容量大，可以灵活扩充，根据程序主动分配的</li></ul><h3 id="变量的拷贝"><a href="#变量的拷贝" class="headerlink" title="变量的拷贝"></a>变量的拷贝</h3><ul><li>对于基本数据类型，拷贝的是值（拷贝以后，互相不影响）</li><li>对于引用数据类型，拷贝的是地址（拷贝后，按相同地址访问的数据，互相影响）</li></ul><h3 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h3><p>函数传参就相当于变量的拷贝（把函数外面的变量拷贝给函数参数）</p><h2 id="（二）对象的深-浅拷贝"><a href="#（二）对象的深-浅拷贝" class="headerlink" title="（二）对象的深/浅拷贝"></a>（二）对象的深/浅拷贝</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    arr<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    obj<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        a<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            b<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                c<span class="token punctuation">:</span> <span class="token number">1</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><ul><li>深拷贝：无限层级的拷贝（有多少层拷多少层，永远拷贝的都是值）</li><li>浅拷贝：只考一层，遇到基本数据类型，拷值，遇到引用数据类型，考地址</li></ul><h3 id="4-种拷贝的方式"><a href="#4-种拷贝的方式" class="headerlink" title="4 种拷贝的方式"></a>4 种拷贝的方式</h3><ol><li>for-in 拷贝 1 层，浅拷贝</li><li>Object.assign() 浅拷贝</li><li>JSON 方法，深拷贝，缺陷：不能拷贝对象的方法</li><li>完美深拷贝。Lodash 工具库 _.cloneDeep() 深拷贝，可以拷贝函数</li></ol><p>深拷贝：特点，新旧对象互不影响<br>浅拷贝：特点，拷贝后，基本数据类型的属性，不影响，引用数据类型，因为拷贝的是地址，所以会互相影响</p><h2 id="（三）变量类型检测"><a href="#（三）变量类型检测" class="headerlink" title="（三）变量类型检测"></a>（三）变量类型检测</h2><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>检测基本数据类型准确，特例，<code>typeof null === &#39;object&#39;</code></p><p><code>typeof function() &#123;&#125; === &#39;function&#39;</code></p><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>语法：变量（实例）instanceof 构造函数<br>原理：判断 构造函数的原型 是否在 实例的原型链上</p><h3 id="Array-isArray-静态方法"><a href="#Array-isArray-静态方法" class="headerlink" title="Array.isArray - 静态方法"></a>Array.isArray - 静态方法</h3><p>Object.assign</p><p>专门用来判断数组类型：<code>log(Array.isArray([])); // true</code></p><h3 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call"></a>Object.prototype.toString.call</h3><p>最准确</p><p>Object.prototype.toString.call() 是把数据的类型信息以字符串显示，格式 ‘[object Type]’</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承可以使子类拥有父类的一切特征（属性和方法），并可以在子类上继续重新定义、追加属性和方法。</p><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><p>核心思想：让子类的原型 = 父类的实例，本质上【重写了原型对象】</p><p>问题（缺陷）：如果修改了父类的原型，所有子类实例都受影响，无论是否是新创建</p><p>原因：原型的作用：原型被所有实例所共享</p><h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><p>思想 2 块：</p><ul><li>组合式（重要）<ul><li>对于属性：继承的属性应该挂到子类【实例】上。在子类构造函数中调用父类构造函数，来继承属性</li><li>对于方法：继承的方法应该挂到【原型链】上。通过 Object.create() 构造了原型的指向关系</li></ul></li><li>寄生：通过 Object.create() 避免了 1 次不必要的父类构造函数的调用，直接共享父类原型方法</li></ul><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><ol><li>代码</li><li>选择题</li><li>深拷贝</li><li>面试题</li></ol><h2 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h2><ul><li>《JavaScript 高级程序设计 4版》- 红宝书，不适合从头看到尾，适合当做深入学习某一个模块去学：<a href="https://item.jd.com/12958580.html">https://item.jd.com/12958580.html</a></li><li>《JavaScript 权威指南》犀牛书，和高程类似，买1本就行，犀牛书偏工具书，不太推荐初学的。<a href="https://item.jd.com/10027630697881.html">https://item.jd.com/10027630697881.html</a></li><li>《JavaScript 忍者秘籍》：适合工作以后，对 JS 进行进阶，达到 熟练程度以上。<a href="https://item.jd.com/27788734578.html">https://item.jd.com/27788734578.html</a></li><li>《JavaScript 语言精粹》：胡蝶书。平时适合看得，比较简单，且薄。<a href="https://item.jd.com/12809957.html">https://item.jd.com/12809957.html</a> 适合 JS 进阶</li><li>不推荐：《你不知道的 JavaScript》：黄宝书，语言描述很绕。</li><li>《编写高可维护的 JavaScript》乌龟书：很薄，一下午能看完。工作前看：树立编码规范意识。<a href="https://item.jd.com/11193885.html">https://item.jd.com/11193885.html</a></li></ul><p>如果你以后的工作要深入 CSS：《CSS 揭秘》：<a href="https://item.jd.com/13305034.html">https://item.jd.com/13305034.html</a></p><p>react  《深入 react  技术栈》强推</p><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul><li>MDN（找JSAPI）：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign</a></li><li>阮一峰《ES6入门指南》：<a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></li></ul><h3 id="各种方法"><a href="#各种方法" class="headerlink" title="各种方法"></a>各种方法</h3><p>React 关键：</p><ul><li>实例方法：实例对象上的方法（构造函数中 this 上的方法）</li><li>原型方法：原型对象上的方法（构造函数.prototype.方法，可以被所有实例所共享）</li><li>静态方法：构造函数.方法</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 高阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到我的博客</title>
      <link href="/2022/01/02/hello-world/"/>
      <url>/2022/01/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
